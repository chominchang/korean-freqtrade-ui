{"version":3,"file":"ChartsView-D1rAOrUT.js","sources":["../../src/stores/chartConfig.ts","../../src/views/ChartsView.vue"],"sourcesContent":["export const useChartConfigStore = defineStore(\r\n  'chartConfig',\r\n  () => {\r\n    const strategy = ref<string>('');\r\n    const useLiveData = ref<boolean>(false);\r\n    const selectedTimeframe = ref<string>('1h');\r\n    const timerange = ref<string>('');\r\n\r\n    return {\r\n      strategy,\r\n      useLiveData,\r\n      selectedTimeframe,\r\n      timerange,\r\n    };\r\n  },\r\n  {\r\n    persist: {\r\n      key: 'ftUIChartSettings',\r\n      pick: ['useLiveData'],\r\n    },\r\n  },\r\n);\r\n\r\nif (import.meta.hot) {\r\n  import.meta.hot.accept(acceptHMRUpdate(useChartConfigStore, import.meta.hot));\r\n}\r\n","<script setup lang=\"ts\">\r\nimport { useBotStore } from '@/stores/ftbotwrapper';\r\nimport { MarginMode, TradingMode } from '@/types';\r\nimport type { ExchangeSelection, Markets, MarketsPayload, PairHistoryPayload } from '@/types';\r\n\r\nconst botStore = useBotStore();\r\nconst chartStore = useChartConfigStore();\r\n\r\nconst finalTimeframe = computed<string>(() => {\r\n  return botStore.activeBot.isWebserverMode\r\n    ? chartStore.selectedTimeframe || botStore.activeBot.strategy.timeframe || ''\r\n    : botStore.activeBot.timeframe;\r\n});\r\n\r\nconst availablePairs = computed<string[]>(() => {\r\n  if (botStore.activeBot.isWebserverMode) {\r\n    if (chartStore.useLiveData) {\r\n      return Object.keys(markets.value?.markets || {}).sort() || [];\r\n    }\r\n    if (finalTimeframe.value && finalTimeframe.value !== '') {\r\n      const tf = finalTimeframe.value;\r\n      return botStore.activeBot.pairlistWithTimeframe\r\n        .filter(([_, timeframe]) => {\r\n          // console.log(pair, timeframe, tf);\r\n          return timeframe === tf;\r\n        })\r\n        .map(([pair]) => pair);\r\n    }\r\n    return botStore.activeBot.pairlist;\r\n  }\r\n  return botStore.activeBot.whitelist;\r\n});\r\n\r\nonMounted(() => {\r\n  if (botStore.activeBot.isWebserverMode) {\r\n    // Get available pairs for all timeframes\r\n    botStore.activeBot.getAvailablePairs({});\r\n  } else if (!botStore.activeBot.whitelist || botStore.activeBot.whitelist.length === 0) {\r\n    botStore.activeBot.getWhitelist();\r\n  }\r\n});\r\n\r\nfunction refreshOHLCV(pair: string, columns: string[]) {\r\n  console.log('Refreshing OHLCV for pair:', pair, finalTimeframe.value, 'with columns:', columns);\r\n  if (botStore.activeBot.isWebserverMode && finalTimeframe.value) {\r\n    const payload: PairHistoryPayload = {\r\n      pair: pair,\r\n      timeframe: finalTimeframe.value,\r\n      timerange: chartStore.timerange,\r\n      strategy: chartStore.strategy,\r\n      // freqaimodel: freqaiModel.value,\r\n      columns: columns,\r\n      live_mode: chartStore.useLiveData,\r\n    };\r\n    if (exchange.value.customExchange) {\r\n      payload.exchange = exchange.value.selectedExchange.exchange;\r\n      payload.trading_mode = exchange.value.selectedExchange.trade_mode.trading_mode;\r\n      payload.margin_mode = exchange.value.selectedExchange.trade_mode.margin_mode;\r\n    }\r\n    botStore.activeBot.getPairHistory(payload);\r\n  } else {\r\n    botStore.activeBot.getPairCandles({\r\n      pair: pair,\r\n      timeframe: finalTimeframe.value,\r\n      columns: columns,\r\n    });\r\n  }\r\n}\r\nconst exchange = ref<{\r\n  customExchange: boolean;\r\n  selectedExchange: ExchangeSelection;\r\n}>({\r\n  customExchange: false,\r\n  selectedExchange: {\r\n    exchange: botStore.activeBot.botState.exchange,\r\n    trade_mode: {\r\n      margin_mode: MarginMode.NONE,\r\n      trading_mode: TradingMode.SPOT,\r\n    },\r\n  },\r\n});\r\n\r\nconst markets = ref<Markets | null>(null);\r\nwatch(\r\n  () => chartStore.useLiveData,\r\n  async () => {\r\n    if (botStore.activeBot.isWebserverMode && chartStore.useLiveData) {\r\n      const payload: MarketsPayload = {};\r\n      if (exchange.value.customExchange) {\r\n        payload.exchange = exchange.value.selectedExchange.exchange;\r\n        payload.trading_mode = exchange.value.selectedExchange.trade_mode.trading_mode;\r\n        payload.margin_mode = exchange.value.selectedExchange.trade_mode.margin_mode;\r\n      }\r\n\r\n      markets.value = await botStore.activeBot.getMarkets(payload);\r\n    }\r\n  },\r\n  {\r\n    immediate: true,\r\n  },\r\n);\r\n</script>\r\n\r\n<template>\r\n  <div class=\"flex flex-col h-full\">\r\n    <!-- <div v-if=\"isWebserverMode\" class=\"me-auto ms-3\"> -->\r\n    <!-- Currently only available in Webserver mode -->\r\n    <!-- <b-form-checkbox v-model=\"historicView\">HistoricData</b-form-checkbox> -->\r\n    <!-- </div> -->\r\n    <div v-if=\"botStore.activeBot.isWebserverMode\" class=\"md:mx-3 mt-2 px-1\">\r\n      <Panel header=\"설정\" toggleable>\r\n        <div\r\n          class=\"mb-2 border dark:border-surface-700 border-surface-300 rounded-md p-2 text-start\"\r\n        >\r\n          <div class=\"flex flex-row gap-5\">\r\n            <BaseCheckbox v-model=\"exchange.customExchange\" class=\"mb-2\">\r\n              커스텀 거래소\r\n            </BaseCheckbox>\r\n            <span v-show=\"!exchange.customExchange\">\r\n              현재 거래소:\r\n              {{ botStore.activeBot.botState.exchange }}\r\n              {{ botStore.activeBot.botState.trading_mode }}\r\n            </span>\r\n          </div>\r\n          <Transition name=\"fade\">\r\n            <ExchangeSelect v-show=\"exchange.customExchange\" v-model=\"exchange.selectedExchange\" />\r\n          </Transition>\r\n        </div>\r\n        <div class=\"grid grid-cols-3 md:grid-cols-5 mx-1 gap-1 md:gap-2\">\r\n          <div class=\"text-start md:me-1 col-span-2\">\r\n            <span>전략</span>\r\n            <StrategySelect v-model=\"chartStore.strategy\" class=\"mt-1 mb-1\"></StrategySelect>\r\n            <BaseCheckbox\r\n              v-if=\"botStore.activeBot.botState.api_version >= 2.42\"\r\n              v-model=\"chartStore.useLiveData\"\r\n              class=\"align-self-center\"\r\n              title=\"거래소에서 실시간 데이터를 사용합니다. 로컬에 다운로드된 데이터가 없는 경우에만 사용하세요.\"\r\n            >\r\n              실시간 데이터 사용\r\n            </BaseCheckbox>\r\n          </div>\r\n          <div class=\"flex flex-col text-start\">\r\n            <span>타임프레임</span>\r\n            <TimeframeSelect v-model=\"chartStore.selectedTimeframe\" class=\"mt-1\" />\r\n          </div>\r\n          <TimeRangeSelect\r\n            v-model=\"chartStore.timerange\"\r\n            class=\"col-span-3 md:col-span-2\"\r\n          ></TimeRangeSelect>\r\n        </div>\r\n      </Panel>\r\n    </div>\r\n\r\n    <div class=\"md:mx-2 mt-2 pb-1 h-full\">\r\n      <CandleChartContainer\r\n        :available-pairs=\"availablePairs\"\r\n        :historic-view=\"botStore.activeBot.isWebserverMode\"\r\n        :timeframe=\"finalTimeframe\"\r\n        :trades=\"botStore.activeBot.trades\"\r\n        :timerange=\"botStore.activeBot.isWebserverMode ? chartStore.timerange : undefined\"\r\n        :strategy=\"botStore.activeBot.isWebserverMode ? chartStore.strategy : undefined\"\r\n        :plot-config-modal=\"false\"\r\n        @refresh-data=\"refreshOHLCV\"\r\n      >\r\n      </CandleChartContainer>\r\n    </div>\r\n  </div>\r\n</template>\r\n"],"names":["useChartConfigStore","defineStore","strategy","ref","useLiveData","selectedTimeframe","timerange","botStore","useBotStore","chartStore","finalTimeframe","computed","availablePairs","_a","markets","tf","_","timeframe","pair","onMounted","refreshOHLCV","columns","payload","exchange","MarginMode","TradingMode","watch"],"mappings":"2wBAAO,MAAMA,EAAsBC,EACjC,cACA,IAAM,CACE,MAAAC,EAAWC,EAAY,EAAE,EACzBC,EAAcD,EAAa,EAAK,EAChCE,EAAoBF,EAAY,IAAI,EACpCG,EAAYH,EAAY,EAAE,EAEzB,MAAA,CACL,SAAAD,EACA,YAAAE,EACA,kBAAAC,EACA,UAAAC,CACF,CACF,EACA,CACE,QAAS,CACP,IAAK,oBACL,KAAM,CAAC,aAAa,CAAA,CACtB,CAEJ,6ZChBA,MAAMC,EAAWC,EAAY,EACvBC,EAAaT,EAAoB,EAEjCU,EAAiBC,EAAiB,IAC/BJ,EAAS,UAAU,gBACtBE,EAAW,mBAAqBF,EAAS,UAAU,SAAS,WAAa,GACzEA,EAAS,UAAU,SACxB,EAEKK,EAAiBD,EAAmB,IAAM,OAC1C,GAAAJ,EAAS,UAAU,gBAAiB,CACtC,GAAIE,EAAW,YACN,OAAA,OAAO,OAAKI,EAAAC,EAAQ,QAAR,YAAAD,EAAe,UAAW,CAAE,CAAA,EAAE,KAAK,GAAK,CAAC,EAE9D,GAAIH,EAAe,OAASA,EAAe,QAAU,GAAI,CACvD,MAAMK,EAAKL,EAAe,MACnB,OAAAH,EAAS,UAAU,sBACvB,OAAO,CAAC,CAACS,EAAGC,CAAS,IAEbA,IAAcF,CACtB,EACA,IAAI,CAAC,CAACG,CAAI,IAAMA,CAAI,CAAA,CAEzB,OAAOX,EAAS,UAAU,QAAA,CAE5B,OAAOA,EAAS,UAAU,SAAA,CAC3B,EAEDY,EAAU,IAAM,CACVZ,EAAS,UAAU,gBAEZA,EAAA,UAAU,kBAAkB,EAAE,GAC9B,CAACA,EAAS,UAAU,WAAaA,EAAS,UAAU,UAAU,SAAW,IAClFA,EAAS,UAAU,aAAa,CAClC,CACD,EAEQ,SAAAa,EAAaF,EAAcG,EAAmB,CAErD,GADA,QAAQ,IAAI,6BAA8BH,EAAMR,EAAe,MAAO,gBAAiBW,CAAO,EAC1Fd,EAAS,UAAU,iBAAmBG,EAAe,MAAO,CAC9D,MAAMY,EAA8B,CAClC,KAAAJ,EACA,UAAWR,EAAe,MAC1B,UAAWD,EAAW,UACtB,SAAUA,EAAW,SAErB,QAAAY,EACA,UAAWZ,EAAW,WACxB,EACIc,EAAS,MAAM,iBACTD,EAAA,SAAWC,EAAS,MAAM,iBAAiB,SACnDD,EAAQ,aAAeC,EAAS,MAAM,iBAAiB,WAAW,aAClED,EAAQ,YAAcC,EAAS,MAAM,iBAAiB,WAAW,aAE1DhB,EAAA,UAAU,eAAee,CAAO,CAAA,MAEzCf,EAAS,UAAU,eAAe,CAChC,KAAAW,EACA,UAAWR,EAAe,MAC1B,QAAAW,CAAA,CACD,CACH,CAEF,MAAME,EAAWpB,EAGd,CACD,eAAgB,GAChB,iBAAkB,CAChB,SAAUI,EAAS,UAAU,SAAS,SACtC,WAAY,CACV,YAAaiB,EAAW,KACxB,aAAcC,EAAY,IAAA,CAC5B,CACF,CACD,EAEKX,EAAUX,EAAoB,IAAI,EACxC,OAAAuB,EACE,IAAMjB,EAAW,YACjB,SAAY,CACV,GAAIF,EAAS,UAAU,iBAAmBE,EAAW,YAAa,CAChE,MAAMa,EAA0B,CAAC,EAC7BC,EAAS,MAAM,iBACTD,EAAA,SAAWC,EAAS,MAAM,iBAAiB,SACnDD,EAAQ,aAAeC,EAAS,MAAM,iBAAiB,WAAW,aAClED,EAAQ,YAAcC,EAAS,MAAM,iBAAiB,WAAW,aAGnET,EAAQ,MAAQ,MAAMP,EAAS,UAAU,WAAWe,CAAO,CAAA,CAE/D,EACA,CACE,UAAW,EAAA,CAEf"}
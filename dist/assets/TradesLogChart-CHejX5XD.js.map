{"version":3,"file":"TradesLogChart-CHejX5XD.js","sources":["../../src/components/charts/CumProfitChart.vue","../../src/components/charts/TradesLogChart.vue"],"sourcesContent":["<script setup lang=\"ts\">\r\nimport type { EChartsOption } from 'echarts';\r\nimport ECharts from 'vue-echarts';\r\n\r\nimport { BarChart, LineChart } from 'echarts/charts';\r\nimport {\r\n  DataZoomComponent,\r\n  DatasetComponent,\r\n  GridComponent,\r\n  LegendComponent,\r\n  TitleComponent,\r\n  TooltipComponent,\r\n} from 'echarts/components';\r\nimport { use } from 'echarts/core';\r\nimport { CanvasRenderer } from 'echarts/renderers';\r\n\r\nimport { useSettingsStore } from '@/stores/settings';\r\nimport type {\r\n  ClosedTrade,\r\n  CumProfitChartData,\r\n  CumProfitData,\r\n  CumProfitDataPerDate,\r\n  Trade,\r\n} from '@/types';\r\nimport type { ComputedRefWithControl } from '@vueuse/core';\r\n\r\nuse([\r\n  BarChart,\r\n  LineChart,\r\n\r\n  CanvasRenderer,\r\n\r\n  DatasetComponent,\r\n  DataZoomComponent,\r\n  GridComponent,\r\n  LegendComponent,\r\n  TitleComponent,\r\n  TooltipComponent,\r\n]);\r\n\r\n// Define Column labels here to avoid typos\r\nconst CHART_PROFIT = 'Profit';\r\n\r\nconst props = withDefaults(\r\n  defineProps<{\r\n    trades: ClosedTrade[];\r\n    openTrades?: Trade[];\r\n    showTitle?: boolean;\r\n    profitColumn?: string;\r\n  }>(),\r\n  {\r\n    openTrades: () => [],\r\n    showTitle: true,\r\n    profitColumn: 'profit_abs',\r\n  },\r\n);\r\nconst settingsStore = useSettingsStore();\r\nconst colorStore = useColorStore();\r\n// const botList = ref<string[]>([]);\r\n\r\nconst chart = ref<InstanceType<typeof ECharts>>();\r\n\r\nconst openProfit = computed<number>(() => {\r\n  return props.openTrades.reduce(\r\n    (a, v) => a + (v['total_profit_abs'] ?? v[props.profitColumn] ?? 0),\r\n    0,\r\n  );\r\n});\r\n\r\nconst cumulativeData = computed<CumProfitChartData[]>(() => {\r\n  // const res: CumProfitData[] = [];\r\n  const resD: CumProfitDataPerDate = {};\r\n  const closedTrades = props.trades\r\n    .slice()\r\n    .sort((a, b) => (a.close_timestamp > b.close_timestamp ? 1 : -1));\r\n  let profit = 0.0;\r\n  let first = true;\r\n\r\n  for (let i = 0, len = closedTrades.length; i < len; i += 1) {\r\n    const trade = closedTrades[i];\r\n    if (first) {\r\n      // Start with chart with a 0 entry\r\n      first = false;\r\n      if (!resD[trade.open_timestamp]) {\r\n        // New timestamp\r\n        resD[trade.open_timestamp] = { profit, [trade.botId]: profit };\r\n      } else {\r\n        // Add to existing profit\r\n        resD[trade.open_timestamp][trade.botId] = profit;\r\n      }\r\n    }\r\n\r\n    if (trade.close_timestamp && trade[props.profitColumn]) {\r\n      profit += trade[props.profitColumn];\r\n      if (!resD[trade.close_timestamp]) {\r\n        // New timestamp\r\n        resD[trade.close_timestamp] = { profit, [trade.botId]: profit };\r\n      } else {\r\n        // Add to existing profit\r\n        resD[trade.close_timestamp].profit += trade[props.profitColumn];\r\n        if (resD[trade.close_timestamp][trade.botId]) {\r\n          resD[trade.close_timestamp][trade.botId] += trade[props.profitColumn];\r\n        } else {\r\n          resD[trade.close_timestamp][trade.botId] = profit;\r\n        }\r\n      }\r\n      // res.push({ date: trade.close_timestamp, profit, [trade.botId]: profit });\r\n    }\r\n  }\r\n\r\n  const valueArray: CumProfitChartData[] = Object.entries(resD).map(\r\n    ([k, v]: [string, CumProfitData]) => {\r\n      const obj = { date: parseInt(k, 10), profit: v.profit };\r\n      // TODO: The below could allow \"lines\" per bot\"\r\n      // this.botList.forEach((botId) => {\r\n      // obj[botId] = v[botId];\r\n      // });\r\n      return obj;\r\n    },\r\n  );\r\n\r\n  if (props.openTrades.length > 0) {\r\n    let lastProfit = 0;\r\n    let lastDate = 0;\r\n    if (valueArray.length > 0) {\r\n      const lastPoint = valueArray[valueArray.length - 1];\r\n      lastProfit = lastPoint.profit ?? 0;\r\n      lastDate = lastPoint.date ?? 0;\r\n    } else {\r\n      lastDate = props.openTrades[0].open_timestamp;\r\n    }\r\n    const resultWitHOpen = (lastProfit ?? 0) + openProfit.value;\r\n    valueArray.push({ date: lastDate, currentProfit: lastProfit });\r\n    // Add one day to date to ensure it's showing properly\r\n    const tomorrow = Date.now() + 24 * 60 * 60 * 1000;\r\n    valueArray.push({ date: tomorrow, currentProfit: resultWitHOpen });\r\n  }\r\n  return valueArray;\r\n});\r\n\r\nfunction generateChart(initial = false) {\r\n  const { colorProfit, colorLoss } = colorStore;\r\n  const chartOptionsLoc: EChartsOption = {\r\n    dataset: {\r\n      dimensions: ['date', 'profit', 'currentProfit'],\r\n      source: cumulativeData.value,\r\n    },\r\n\r\n    series: [\r\n      {\r\n        // Keep  current-profit before profit, so the starting symbol is behind\r\n        type: 'line',\r\n        name: 'currentProfit',\r\n\r\n        animation: initial,\r\n\r\n        lineStyle: {\r\n          color: openProfit.value > 0 ? colorProfit : colorLoss,\r\n          type: 'dotted',\r\n        },\r\n        itemStyle: {\r\n          color: openProfit.value > 0 ? colorProfit : colorLoss,\r\n        },\r\n        encode: {\r\n          x: 'date',\r\n          y: 'currentProfit',\r\n        },\r\n      },\r\n      {\r\n        type: 'line',\r\n        name: CHART_PROFIT,\r\n        animation: initial,\r\n        step: 'end',\r\n        lineStyle: {\r\n          color: settingsStore.chartTheme === 'dark' ? '#c2c2c2' : 'black',\r\n        },\r\n        itemStyle: {\r\n          color: settingsStore.chartTheme === 'dark' ? '#c2c2c2' : 'black',\r\n        },\r\n        encode: {\r\n          x: 'date',\r\n          y: 'profit',\r\n        },\r\n        // symbol: 'none',\r\n      },\r\n    ],\r\n  };\r\n  // TODO: maybe have profit lines per bot?\r\n  // this.botList.forEach((botId: string) => {\r\n  //   console.log('bot', botId);\r\n  //   chartOptionsLoc.series.push({\r\n  //     type: 'line',\r\n  //     name: botId,\r\n  //     animation: true,\r\n  //     step: 'end',\r\n  //     lineStyle: {\r\n  //       color: settingsStore.chartTheme === 'dark' ? '#c2c2c2' : 'black',\r\n  //     },\r\n  //     itemStylesettingsStore.chartTheme === 'dark' ? '#c2c2c2' : 'black',\r\n  //     },\r\n  //     // symbol: 'none',\r\n  //   });\r\n  // });\r\n  return chartOptionsLoc;\r\n}\r\nfunction updateChart(initial = false) {\r\n  const chartOptionsLoc = generateChart(initial);\r\n  chart.value?.setOption(chartOptionsLoc, {\r\n    replaceMerge: ['series', 'dataset'],\r\n  });\r\n}\r\n\r\nconst cumProfitChartOptions: ComputedRefWithControl<EChartsOption> = computedWithControl(\r\n  () => props.trades,\r\n  () => {\r\n    const chartOptionsLoc: EChartsOption = {\r\n      title: {\r\n        text: 'Cumulative Profit',\r\n        left: 'center',\r\n        show: props.showTitle,\r\n      },\r\n      backgroundColor: 'rgba(0, 0, 0, 0)',\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        formatter: (params) => {\r\n          const profit = params[0].data.profit;\r\n          const currentProfit = params[0].data['currentProfit'];\r\n          const profitText = currentProfit\r\n            ? `Projected profit (incl. unrealized): ${formatPrice(currentProfit, 3)}`\r\n            : `Profit: ${formatPrice(profit, 3)}`;\r\n          return `${timestampToDateString(params[1].data.date)}<br />${\r\n            params[1].marker\r\n          }${profitText}`;\r\n        },\r\n        axisPointer: {\r\n          type: 'line',\r\n          label: {\r\n            backgroundColor: '#6a7985',\r\n          },\r\n        },\r\n      },\r\n      legend: {\r\n        data: [CHART_PROFIT],\r\n        right: '5%',\r\n        selectedMode: false,\r\n      },\r\n      useUTC: false,\r\n      xAxis: {\r\n        type: 'time',\r\n      },\r\n      yAxis: [\r\n        {\r\n          type: 'value',\r\n          name: CHART_PROFIT,\r\n          splitLine: {\r\n            show: false,\r\n          },\r\n          nameRotate: 90,\r\n          nameLocation: 'middle',\r\n          nameGap: 40,\r\n        },\r\n      ],\r\n      grid: {\r\n        ...echartsGridDefault,\r\n      },\r\n      dataZoom: [\r\n        {\r\n          type: 'inside',\r\n          // xAxisIndex: [0],\r\n          start: 0,\r\n\r\n          end: 100,\r\n        },\r\n        {\r\n          // xAxisIndex: [0],\r\n          bottom: 10,\r\n          start: 0,\r\n          end: 100,\r\n          ...dataZoomPartial,\r\n        },\r\n      ],\r\n    };\r\n\r\n    const chartOptionsLoc1 = generateChart(false);\r\n    // Merge the series and dataset, but not the rest\r\n    chartOptionsLoc.series = chartOptionsLoc1.series;\r\n    chartOptionsLoc.dataset = chartOptionsLoc1.dataset;\r\n    // console.log('computed chartOptionsLoc', chartOptionsLoc);\r\n    return chartOptionsLoc;\r\n  },\r\n);\r\n\r\nonMounted(() => {\r\n  // initializeChart();\r\n});\r\n\r\nwatchThrottled(\r\n  () => props.openTrades,\r\n  () => {\r\n    // cumProfitChartOptions.trigger();\r\n    updateChart();\r\n  },\r\n  { throttle: 60 * 1000 },\r\n);\r\nwatch(\r\n  () => settingsStore.chartTheme,\r\n  () => {\r\n    cumProfitChartOptions.trigger();\r\n  },\r\n);\r\n</script>\r\n\r\n<template>\r\n  <ECharts\r\n    v-if=\"trades\"\r\n    ref=\"chart\"\r\n    :option=\"cumProfitChartOptions\"\r\n    :theme=\"settingsStore.chartTheme\"\r\n    autoresize\r\n  />\r\n</template>\r\n\r\n<style scoped>\r\n.echarts {\r\n  width: 100%;\r\n  height: 100%;\r\n  min-height: 150px;\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport ECharts from 'vue-echarts';\r\nimport type { EChartsOption } from 'echarts';\r\n\r\nimport { use } from 'echarts/core';\r\nimport { CanvasRenderer } from 'echarts/renderers';\r\nimport { LineChart, BarChart } from 'echarts/charts';\r\nimport {\r\n  DatasetComponent,\r\n  DataZoomComponent,\r\n  LegendComponent,\r\n  TitleComponent,\r\n  TooltipComponent,\r\n  VisualMapComponent,\r\n  VisualMapPiecewiseComponent,\r\n} from 'echarts/components';\r\n\r\nimport type { ClosedTrade } from '@/types';\r\nimport { useSettingsStore } from '@/stores/settings';\r\n\r\nimport { useColorStore } from '@/stores/colors';\r\n\r\nuse([\r\n  BarChart,\r\n  LineChart,\r\n\r\n  CanvasRenderer,\r\n\r\n  DatasetComponent,\r\n  DataZoomComponent,\r\n  LegendComponent,\r\n  TitleComponent,\r\n  TooltipComponent,\r\n  VisualMapComponent,\r\n  VisualMapPiecewiseComponent,\r\n]);\r\n\r\n// Define Column labels here to avoid typos\r\nconst CHART_PROFIT = 'Profit %';\r\nconst CHART_COLOR = '#9be0a8';\r\n\r\nconst props = defineProps({\r\n  trades: { required: true, type: Array as () => ClosedTrade[] },\r\n  showTitle: { default: true, type: Boolean },\r\n});\r\nconst settingsStore = useSettingsStore();\r\nconst colorStore = useColorStore();\r\nconst chartData = computed(() => {\r\n  const res: (number | string)[][] = [];\r\n  const sortedTrades = props.trades\r\n    .slice(0)\r\n    .sort((a, b) => (a.close_timestamp > b.close_timestamp ? 1 : -1));\r\n  for (let i = 0, len = sortedTrades.length; i < len; i += 1) {\r\n    const trade = sortedTrades[i];\r\n    const entry = [\r\n      i,\r\n      (trade.profit_ratio * 100).toFixed(2),\r\n      trade.pair,\r\n      trade.botName,\r\n      timestampms(trade.close_timestamp),\r\n      trade.is_short === undefined || !trade.is_short ? 'Long' : 'Short',\r\n    ];\r\n    res.push(entry);\r\n  }\r\n  return res;\r\n});\r\n\r\nconst chartOptions = computed((): EChartsOption => {\r\n  // const { chartData } = this;\r\n  // Show a maximum of 50 trades by default - allowing to zoom out further.\r\n  const datazoomStart = chartData.value.length > 0 ? (1 - 50 / chartData.value.length) * 100 : 100;\r\n  return {\r\n    title: {\r\n      text: 'Trades log',\r\n      left: 'center',\r\n      show: props.showTitle,\r\n    },\r\n    backgroundColor: 'rgba(0, 0, 0, 0)',\r\n    dataset: {\r\n      dimensions: ['date', 'profit'],\r\n      source: chartData.value,\r\n    },\r\n    tooltip: {\r\n      trigger: 'axis',\r\n      formatter: (params) => {\r\n        const botName = params[0].data[3] ? ` | ${params[0].data[3]}` : '';\r\n        return `${params[0].data[2]} | ${params[0].data[5]} ${botName}<br>${params[0].data[4]}<br>Profit ${params[0].data[1]} %`;\r\n      },\r\n      axisPointer: {\r\n        type: 'line',\r\n        label: {\r\n          backgroundColor: '#6a7985',\r\n        },\r\n      },\r\n    },\r\n    xAxis: {\r\n      type: 'category',\r\n      show: false,\r\n    },\r\n    yAxis: [\r\n      {\r\n        type: 'value',\r\n        name: CHART_PROFIT,\r\n        splitLine: {\r\n          show: false,\r\n        },\r\n        nameRotate: 90,\r\n        nameLocation: 'middle',\r\n        nameGap: 30,\r\n      },\r\n    ],\r\n    grid: {\r\n      ...echartsGridDefault,\r\n      left: 80,\r\n    },\r\n    dataZoom: [\r\n      {\r\n        type: 'inside',\r\n        start: datazoomStart,\r\n        end: 100,\r\n      },\r\n      {\r\n        bottom: 10,\r\n        start: datazoomStart,\r\n        end: 100,\r\n        ...dataZoomPartial,\r\n      },\r\n    ],\r\n    visualMap: [\r\n      {\r\n        show: true,\r\n        seriesIndex: 0,\r\n        pieces: [\r\n          {\r\n            max: 0.0,\r\n            color: colorStore.colorLoss,\r\n          },\r\n          {\r\n            min: 0.0,\r\n            color: colorStore.colorProfit,\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n    series: [\r\n      {\r\n        type: 'bar',\r\n        name: CHART_PROFIT,\r\n        barCategoryGap: '0%',\r\n        animation: false,\r\n        label: {\r\n          show: true,\r\n          position: 'top',\r\n          rotate: 90,\r\n          offset: [7.5, 7.5],\r\n          formatter: '{@[1]} %',\r\n          color: settingsStore.chartTheme === 'dark' ? '#c2c2c2' : '#3c3c3c',\r\n        },\r\n        encode: {\r\n          x: 0,\r\n          y: 1,\r\n        },\r\n\r\n        itemStyle: {\r\n          color: CHART_COLOR,\r\n        },\r\n      },\r\n    ],\r\n  };\r\n});\r\n</script>\r\n\r\n<template>\r\n  <ECharts\r\n    v-if=\"trades.length > 0\"\r\n    :option=\"chartOptions\"\r\n    autoresize\r\n    :theme=\"settingsStore.chartTheme\"\r\n  />\r\n</template>\r\n\r\n<style scoped>\r\n.echarts {\r\n  width: 100%;\r\n  height: 100%;\r\n  min-height: 150px;\r\n}\r\n</style>\r\n"],"names":["CHART_PROFIT","use","BarChart","LineChart","CanvasRenderer","DatasetComponent","DataZoomComponent","GridComponent","LegendComponent","TitleComponent","TooltipComponent","props","__props","settingsStore","useSettingsStore","colorStore","useColorStore","chart","ref","openProfit","computed","a","v","cumulativeData","resD","closedTrades","b","profit","first","i","len","trade","valueArray","k","lastProfit","lastDate","lastPoint","resultWitHOpen","tomorrow","generateChart","initial","colorProfit","colorLoss","updateChart","chartOptionsLoc","_a","cumProfitChartOptions","computedWithControl","params","currentProfit","profitText","formatPrice","timestampToDateString","echartsGridDefault","dataZoomPartial","chartOptionsLoc1","onMounted","watchThrottled","watch","CHART_COLOR","VisualMapComponent","VisualMapPiecewiseComponent","chartData","res","sortedTrades","entry","timestampms","chartOptions","datazoomStart","botName"],"mappings":"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"}
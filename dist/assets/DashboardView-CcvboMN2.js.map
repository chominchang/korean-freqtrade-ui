{"version":3,"file":"DashboardView-CcvboMN2.js","sources":["../../src/components/ftbot/BotComparisonList.vue","../../src/views/DashboardView.vue"],"sourcesContent":["<script setup lang=\"ts\">\r\nimport { useBotStore } from '@/stores/ftbotwrapper';\r\nimport type { ProfitInterface, ComparisonTableItems } from '@/types';\r\n\r\nconst botStore = useBotStore();\r\n\r\nconst allToggled = computed<boolean>({\r\n  get: () => Object.values(botStore.botStores).every((i) => i.isSelected),\r\n  set: (val) => {\r\n    for (const botId in botStore.botStores) {\r\n      botStore.botStores[botId].isSelected = val;\r\n    }\r\n  },\r\n});\r\n\r\nconst tableItems = computed<ComparisonTableItems[]>(() => {\r\n  const val: ComparisonTableItems[] = [];\r\n  const summary: ComparisonTableItems = {\r\n    botId: undefined,\r\n    botName: 'Summary',\r\n    profitClosed: 0,\r\n    profitClosedRatio: undefined,\r\n    profitOpen: 0,\r\n    profitOpenRatio: undefined,\r\n    stakeCurrency: 'USDT',\r\n    wins: 0,\r\n    losses: 0,\r\n  };\r\n\r\n  Object.entries(botStore.allProfit).forEach(([k, v]: [k: string, v: ProfitInterface]) => {\r\n    const allStakes = botStore.allOpenTrades[k].reduce((a, b) => a + b.stake_amount, 0);\r\n    const profitOpenRatio =\r\n      botStore.allOpenTrades[k].reduce(\r\n        (a, b) => a + (b.total_profit_ratio ?? b.profit_ratio) * b.stake_amount,\r\n        0,\r\n      ) / allStakes;\r\n    const profitOpen = botStore.allOpenTrades[k].reduce(\r\n      (a, b) => a + (b.total_profit_abs ?? b.profit_abs ?? 0),\r\n      0,\r\n    );\r\n\r\n    // TODO: handle one inactive bot ...\r\n    val.push({\r\n      botId: k,\r\n      botName: botStore.availableBots[k].botName || botStore.availableBots[k].botId,\r\n      trades: `${botStore.allOpenTradeCount[k]} / ${\r\n        botStore.allBotState[k]?.max_open_trades || 'N/A'\r\n      }`,\r\n      profitClosed: v.profit_closed_coin,\r\n      profitClosedRatio: v.profit_closed_ratio || 0,\r\n      stakeCurrency: botStore.allBotState[k]?.stake_currency || '',\r\n      profitOpenRatio,\r\n      profitOpen,\r\n      wins: v.winning_trades,\r\n      losses: v.losing_trades,\r\n      balance: botStore.allBalance[k]?.total_bot ?? botStore.allBalance[k]?.total,\r\n      stakeCurrencyDecimals: botStore.allBotState[k]?.stake_currency_decimals || 3,\r\n      isDryRun: botStore.allBotState[k]?.dry_run,\r\n      isOnline: botStore.botStores[k]?.isBotOnline,\r\n    });\r\n    if (v.profit_closed_coin !== undefined) {\r\n      if (botStore.botStores[k].isSelected) {\r\n        // Summary should only include selected bots\r\n        summary.profitClosed += v.profit_closed_coin;\r\n        summary.profitOpen += profitOpen;\r\n        summary.wins += v.winning_trades;\r\n        summary.losses += v.losing_trades;\r\n        // summary.decimals = this.allBotState[k]?.stake_currency_decimals || summary.decimals;\r\n        // This will always take the last bot's stake currency\r\n        // And therefore may result in wrong values.\r\n        summary.stakeCurrency = botStore.allBotState[k]?.stake_currency || summary.stakeCurrency;\r\n      }\r\n    }\r\n  });\r\n  val.push(summary);\r\n  return val;\r\n});\r\n</script>\r\n\r\n<template>\r\n  <DataTable size=\"small\" :value=\"tableItems\">\r\n    <Column field=\"botName\" header=\"Bot\">\r\n      <template #body=\"{ data, field }\">\r\n        <div class=\"flex flex-row justify-between items-center\">\r\n          <div>\r\n            <BaseCheckbox\r\n              v-if=\"data.botId && botStore.botCount > 1\"\r\n              v-model=\"\r\n                botStore.botStores[(data as unknown as ComparisonTableItems).botId ?? ''].isSelected\r\n              \"\r\n              title=\"Show this bot in Dashboard\"\r\n              >{{ data[field] }}</BaseCheckbox\r\n            >\r\n            <BaseCheckbox\r\n              v-if=\"!data.botId && botStore.botCount > 1\"\r\n              v-model=\"allToggled\"\r\n              title=\"Toggle all bots\"\r\n              class=\"font-bold\"\r\n              >{{ data[field] }}</BaseCheckbox\r\n            >\r\n            <span v-if=\"botStore.botCount <= 1\">{{ data[field] }}</span>\r\n          </div>\r\n          <Badge\r\n            v-if=\"data.isOnline && data.isDryRun\"\r\n            class=\"items-center bg-green-800 text-slate-200\"\r\n            severity=\"success\"\r\n            >Dry</Badge\r\n          >\r\n          <Badge v-if=\"data.isOnline && !data.isDryRun\" class=\"items-center\" severity=\"warning\"\r\n            >Live</Badge\r\n          >\r\n          <Badge v-if=\"data.isOnline === false\" class=\"items-center\" severity=\"secondary\"\r\n            >Offline</Badge\r\n          >\r\n        </div>\r\n      </template>\r\n    </Column>\r\n    <Column field=\"trades\" header=\"Trades\"> </Column>\r\n    <Column header=\"Open Profit\">\r\n      <template #body=\"{ data }\">\r\n        <ProfitPill\r\n          v-if=\"data.profitOpen && data.botId != 'Summary'\"\r\n          :profit-ratio=\"(data as unknown as ComparisonTableItems).profitOpenRatio\"\r\n          :profit-abs=\"(data as unknown as ComparisonTableItems).profitOpen\"\r\n          :profit-desc=\"`Total Profit (Open and realized) ${formatPercent(\r\n            (data as ComparisonTableItems).profitOpenRatio ?? 0.0,\r\n          )}`\"\r\n          :stake-currency=\"(data as ComparisonTableItems).stakeCurrency\"\r\n        />\r\n      </template>\r\n    </Column>\r\n    <Column header=\"Closed Profit\">\r\n      <template #body=\"{ data }\">\r\n        <ProfitPill\r\n          v-if=\"data.profitClosed && data.botId != 'Summary'\"\r\n          :profit-ratio=\"(data as ComparisonTableItems).profitClosedRatio\"\r\n          :profit-abs=\"(data as ComparisonTableItems).profitClosed\"\r\n          :stake-currency=\"(data as unknown as ComparisonTableItems).stakeCurrency\"\r\n        />\r\n      </template>\r\n    </Column>\r\n    <Column field=\"balance\" header=\"Balance\">\r\n      <template #body=\"{ data }\">\r\n        <div v-if=\"data.balance\">\r\n          <span :title=\"(data as ComparisonTableItems).stakeCurrency\"\r\n            >{{\r\n              formatPrice(\r\n                (data as ComparisonTableItems).balance ?? 0,\r\n                (data as ComparisonTableItems).stakeCurrencyDecimals,\r\n              )\r\n            }}\r\n          </span>\r\n          <span class=\"text-sm\">{{\r\n            ` ${data.stakeCurrency}${data.isDryRun ? ' (dry)' : ''}`\r\n          }}</span>\r\n        </div>\r\n      </template>\r\n    </Column>\r\n    <Column field=\"winVsLoss\" header=\"W/L\">\r\n      <template #body=\"{ data }\">\r\n        <div v-if=\"data.losses !== undefined\">\r\n          <span class=\"text-profit\">{{ data.wins }}</span> /\r\n          <span class=\"text-loss\">{{ data.losses }}</span>\r\n        </div>\r\n      </template>\r\n    </Column>\r\n  </DataTable>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { DashboardLayout, findGridLayout, useLayoutStore } from '@/stores/layout';\r\nimport { useBotStore } from '@/stores/ftbotwrapper';\r\nimport type { GridItemData } from '@/types';\r\n\r\nconst botStore = useBotStore();\r\n\r\nconst layoutStore = useLayoutStore();\r\nconst currentBreakpoint = ref('');\r\n\r\nfunction breakpointChanged(newBreakpoint: string) {\r\n  // console.log('breakpoint:', newBreakpoint);\r\n  currentBreakpoint.value = newBreakpoint;\r\n}\r\nconst isResizableLayout = computed(() =>\r\n  ['', 'sm', 'md', 'lg', 'xl'].includes(currentBreakpoint.value),\r\n);\r\nconst isLayoutLocked = computed(() => {\r\n  return layoutStore.layoutLocked || !isResizableLayout.value;\r\n});\r\n\r\nconst gridLayoutData = computed((): GridItemData[] => {\r\n  if (isResizableLayout.value) {\r\n    return layoutStore.dashboardLayout;\r\n  }\r\n  return [...layoutStore.getDashboardLayoutSm];\r\n});\r\n\r\nfunction layoutUpdatedEvent(newLayout) {\r\n  if (isResizableLayout.value) {\r\n    console.log('newlayout', newLayout);\r\n    console.log('saving dashboard');\r\n    layoutStore.dashboardLayout = newLayout;\r\n  }\r\n}\r\n\r\nconst gridLayoutDaily = computed((): GridItemData => {\r\n  return findGridLayout(gridLayoutData.value, DashboardLayout.dailyChart);\r\n});\r\n\r\nconst gridLayoutBotComparison = computed((): GridItemData => {\r\n  return findGridLayout(gridLayoutData.value, DashboardLayout.botComparison);\r\n});\r\n\r\nconst gridLayoutAllOpenTrades = computed((): GridItemData => {\r\n  return findGridLayout(gridLayoutData.value, DashboardLayout.allOpenTrades);\r\n});\r\nconst gridLayoutAllClosedTrades = computed((): GridItemData => {\r\n  return findGridLayout(gridLayoutData.value, DashboardLayout.allClosedTrades);\r\n});\r\n\r\nconst gridLayoutCumChart = computed((): GridItemData => {\r\n  return findGridLayout(gridLayoutData.value, DashboardLayout.cumChartChart);\r\n});\r\nconst gridLayoutProfitDistribution = computed((): GridItemData => {\r\n  return findGridLayout(gridLayoutData.value, DashboardLayout.profitDistributionChart);\r\n});\r\nconst gridLayoutTradesLogChart = computed((): GridItemData => {\r\n  return findGridLayout(gridLayoutData.value, DashboardLayout.tradesLogChart);\r\n});\r\n\r\nconst responsiveGridLayouts = computed(() => {\r\n  return {\r\n    sm: layoutStore.getDashboardLayoutSm,\r\n  };\r\n});\r\n\r\nonMounted(async () => {\r\n  botStore.allGetDaily({ timescale: 30 });\r\n  // botStore.activeBot.getTrades();\r\n  botStore.activeBot.getOpenTrades();\r\n  botStore.activeBot.getProfit();\r\n});\r\n</script>\r\n\r\n<template>\r\n  <GridLayout\r\n    class=\"h-full w-full\"\r\n    style=\"padding: 1px\"\r\n    :row-height=\"50\"\r\n    :layout=\"gridLayoutData\"\r\n    :vertical-compact=\"false\"\r\n    :margin=\"[2, 2]\"\r\n    :responsive-layouts=\"responsiveGridLayouts\"\r\n    :is-resizable=\"!isLayoutLocked\"\r\n    :is-draggable=\"!isLayoutLocked\"\r\n    :responsive=\"true\"\r\n    :prevent-collision=\"true\"\r\n    :cols=\"{ lg: 12, md: 12, sm: 12, xs: 4, xxs: 2 }\"\r\n    :col-num=\"12\"\r\n    @layout-updated=\"layoutUpdatedEvent\"\r\n    @update:breakpoint=\"breakpointChanged\"\r\n  >\r\n    <template #default=\"{ gridItemProps }\">\r\n      <GridItem\r\n        v-bind=\"gridItemProps\"\r\n        :i=\"gridLayoutDaily.i\"\r\n        :x=\"gridLayoutDaily.x\"\r\n        :y=\"gridLayoutDaily.y\"\r\n        :w=\"gridLayoutDaily.w\"\r\n        :h=\"gridLayoutDaily.h\"\r\n        :min-w=\"3\"\r\n        :min-h=\"4\"\r\n        drag-allow-from=\".drag-header\"\r\n      >\r\n        <DraggableContainer :header=\"`기간별 수익 ${botStore.botCount > 1 ? '통합' : ''}`\">\r\n          <PeriodBreakdown multi-bot-view />\r\n        </DraggableContainer>\r\n      </GridItem>\r\n      <GridItem\r\n        v-bind=\"gridItemProps\"\r\n        :i=\"gridLayoutBotComparison.i\"\r\n        :x=\"gridLayoutBotComparison.x\"\r\n        :y=\"gridLayoutBotComparison.y\"\r\n        :w=\"gridLayoutBotComparison.w\"\r\n        :h=\"gridLayoutBotComparison.h\"\r\n        :min-w=\"3\"\r\n        :min-h=\"4\"\r\n        drag-allow-from=\".drag-header\"\r\n      >\r\n        <DraggableContainer header=\"봇 비교\">\r\n          <BotComparisonList />\r\n        </DraggableContainer>\r\n      </GridItem>\r\n      <GridItem\r\n        v-bind=\"gridItemProps\"\r\n        :i=\"gridLayoutAllOpenTrades.i\"\r\n        :x=\"gridLayoutAllOpenTrades.x\"\r\n        :y=\"gridLayoutAllOpenTrades.y\"\r\n        :w=\"gridLayoutAllOpenTrades.w\"\r\n        :h=\"gridLayoutAllOpenTrades.h\"\r\n        :min-w=\"3\"\r\n        :min-h=\"4\"\r\n        drag-allow-from=\".drag-header\"\r\n      >\r\n        <DraggableContainer>\r\n          <template #header>\r\n            <div class=\"flex justify-content-center\">\r\n              진행 중인 거래\r\n              <InfoBox\r\n                class=\"ms-2\"\r\n                hint=\"선택된 모든 봇의 진행 중인 거래입니다. 거래를 클릭하면 해당 봇/거래의 거래 페이지로 이동합니다.\"\r\n              />\r\n            </div>\r\n          </template>\r\n          <TradeList active-trades :trades=\"botStore.allOpenTradesSelectedBots\" multi-bot-view />\r\n        </DraggableContainer>\r\n      </GridItem>\r\n      <GridItem\r\n        v-bind=\"gridItemProps\"\r\n        :i=\"gridLayoutCumChart.i\"\r\n        :x=\"gridLayoutCumChart.x\"\r\n        :y=\"gridLayoutCumChart.y\"\r\n        :w=\"gridLayoutCumChart.w\"\r\n        :h=\"gridLayoutCumChart.h\"\r\n        :min-w=\"3\"\r\n        :min-h=\"4\"\r\n        drag-allow-from=\".drag-header\"\r\n      >\r\n        <DraggableContainer header=\"누적 수익\">\r\n          <CumProfitChart\r\n            :trades=\"botStore.allTradesSelectedBots\"\r\n            :open-trades=\"botStore.allOpenTradesSelectedBots\"\r\n            :show-title=\"false\"\r\n          />\r\n        </DraggableContainer>\r\n      </GridItem>\r\n      <GridItem\r\n        v-bind=\"gridItemProps\"\r\n        :i=\"gridLayoutAllClosedTrades.i\"\r\n        :x=\"gridLayoutAllClosedTrades.x\"\r\n        :y=\"gridLayoutAllClosedTrades.y\"\r\n        :w=\"gridLayoutAllClosedTrades.w\"\r\n        :h=\"gridLayoutAllClosedTrades.h\"\r\n        :min-w=\"3\"\r\n        :min-h=\"4\"\r\n        drag-allow-from=\".drag-header\"\r\n      >\r\n        <DraggableContainer>\r\n          <template #header>\r\n            <div class=\"flex justify-content-center\">\r\n              종료된 거래\r\n              <InfoBox\r\n                class=\"ms-2\"\r\n                hint=\"선택된 모든 봇의 종료된 거래입니다. 거래를 클릭하면 해당 봇/거래의 거래 페이지로 이동합니다.\"\r\n              />\r\n            </div>\r\n          </template>\r\n          <TradeList\r\n            :active-trades=\"false\"\r\n            show-filter\r\n            :trades=\"botStore.allClosedTradesSelectedBots\"\r\n            multi-bot-view\r\n          />\r\n        </DraggableContainer>\r\n      </GridItem>\r\n      <GridItem\r\n        v-bind=\"gridItemProps\"\r\n        :i=\"gridLayoutProfitDistribution.i\"\r\n        :x=\"gridLayoutProfitDistribution.x\"\r\n        :y=\"gridLayoutProfitDistribution.y\"\r\n        :w=\"gridLayoutProfitDistribution.w\"\r\n        :h=\"gridLayoutProfitDistribution.h\"\r\n        :min-w=\"3\"\r\n        :min-h=\"4\"\r\n        drag-allow-from=\".drag-header\"\r\n      >\r\n        <DraggableContainer header=\"수익 분포\">\r\n          <ProfitDistribution :trades=\"botStore.allTradesSelectedBots\" :show-title=\"false\" />\r\n        </DraggableContainer>\r\n      </GridItem>\r\n      <GridItem\r\n        v-bind=\"gridItemProps\"\r\n        :i=\"gridLayoutTradesLogChart.i\"\r\n        :x=\"gridLayoutTradesLogChart.x\"\r\n        :y=\"gridLayoutTradesLogChart.y\"\r\n        :w=\"gridLayoutTradesLogChart.w\"\r\n        :h=\"gridLayoutTradesLogChart.h\"\r\n        :min-w=\"3\"\r\n        :min-h=\"4\"\r\n        drag-allow-from=\".drag-header\"\r\n      >\r\n        <DraggableContainer header=\"거래 로그\">\r\n          <TradesLogChart :trades=\"botStore.allTradesSelectedBots\" :show-title=\"false\" />\r\n        </DraggableContainer>\r\n      </GridItem>\r\n    </template>\r\n  </GridLayout>\r\n</template>\r\n"],"names":["botStore","useBotStore","allToggled","computed","i","val","botId","tableItems","summary","k","v","allStakes","a","b","profitOpenRatio","profitOpen","_a","_b","_c","_d","_e","_f","_g","_h","layoutStore","useLayoutStore","currentBreakpoint","ref","breakpointChanged","newBreakpoint","isResizableLayout","isLayoutLocked","gridLayoutData","layoutUpdatedEvent","newLayout","gridLayoutDaily","findGridLayout","DashboardLayout","gridLayoutBotComparison","gridLayoutAllOpenTrades","gridLayoutAllClosedTrades","gridLayoutCumChart","gridLayoutProfitDistribution","gridLayoutTradesLogChart","responsiveGridLayouts","onMounted"],"mappings":"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"}
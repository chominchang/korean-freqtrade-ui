{"version":3,"file":"TradingView-Byqx_C00.js","sources":["../../src/components/ftbot/PairLockList.vue","../../src/components/ftbot/BotPerformance.vue","../../src/components/ftbot/BotProfit.vue","../../src/components/ftbot/BotStatus.vue","../../src/components/ftbot/BotControls.vue","../../src/views/TradingView.vue"],"sourcesContent":["<script setup lang=\"ts\">\r\nimport type { Lock } from '@/types';\r\n\r\nimport { useBotStore } from '@/stores/ftbotwrapper';\r\nconst botStore = useBotStore();\r\n\r\nfunction removePairLock(item: Lock) {\r\n  console.log(item);\r\n  if (item.id !== undefined) {\r\n    botStore.activeBot.deleteLock(item.id);\r\n  } else {\r\n    showAlert('This Freqtrade version does not support deleting locks.');\r\n  }\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <div class=\"mb-2\">\r\n      <label class=\"me-auto text-xl\">Pair Locks</label>\r\n      <Button class=\"float-end\" severity=\"secondary\" @click=\"botStore.activeBot.getLocks\">\r\n        <template #icon>\r\n          <i-mdi-refresh />\r\n        </template>\r\n      </Button>\r\n    </div>\r\n    <div>\r\n      <DataTable size=\"small\" :items=\"botStore.activeBot.activeLocks\">\r\n        <Column field=\"pair\" header=\"Pair\"></Column>\r\n        <Column field=\"lock_end_timestamp\" header=\"Until\">\r\n          <template #body=\"{ data, field }\">\r\n            {{ timestampms(data[field]) }}\r\n          </template>\r\n        </Column>\r\n        <Column field=\"reason\" header=\"Reason\"></Column>\r\n        <Column field=\"actions\" header=\"Actions\">\r\n          <template #body=\"{ data }\">\r\n            <Button\r\n              class=\"btn-xs ms-1\"\r\n              size=\"small\"\r\n              severity=\"secondary\"\r\n              title=\"Delete Lock\"\r\n              @click=\"removePairLock(data as Lock)\"\r\n            >\r\n              <i-mdi-delete />\r\n            </Button>\r\n          </template>\r\n        </Column>\r\n      </DataTable>\r\n    </div>\r\n  </div>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { useBotStore } from '@/stores/ftbotwrapper';\r\n\r\nconst botStore = useBotStore();\r\nenum PerformanceOptions {\r\n  performance = 'performance',\r\n  entryStats = 'entryStats',\r\n  exitStats = 'exitStats',\r\n  mixTagStats = 'mixTagStats',\r\n}\r\nconst selectedOption = ref<PerformanceOptions>(PerformanceOptions.performance);\r\n\r\nfunction formatTextLen(text: string, len: number) {\r\n  if (text.length > len) {\r\n    return text.substring(0, len) + '...';\r\n  }\r\n  return text;\r\n}\r\n\r\nconst performanceTable = computed<\r\n  {\r\n    key: string;\r\n    label: string;\r\n    formatter?: (v: unknown) => string;\r\n  }[]\r\n>(() => {\r\n  const textLength = 17;\r\n  const initialCol = {\r\n    [PerformanceOptions.performance]: { key: 'pair', label: 'Pair' },\r\n    [PerformanceOptions.entryStats]: {\r\n      key: 'enter_tag',\r\n      label: 'Enter tag',\r\n      formatter: (v: unknown) => formatTextLen(v as string, textLength),\r\n    },\r\n    [PerformanceOptions.exitStats]: {\r\n      key: 'exit_reason',\r\n      label: 'Exit Reason',\r\n      formatter: (v: unknown) => formatTextLen(v as string, textLength),\r\n    },\r\n    [PerformanceOptions.mixTagStats]: {\r\n      key: 'mix_tag',\r\n      label: 'Mix Tag',\r\n      formatter: (v: unknown) => formatTextLen(v as string, textLength),\r\n    },\r\n  };\r\n  return [\r\n    initialCol[selectedOption.value],\r\n    { key: 'profit', label: 'Profit %' },\r\n    {\r\n      key: 'profit_abs',\r\n      label: `Profit ${botStore.activeBot.botState?.stake_currency}`,\r\n      formatter: (v: unknown) => formatPrice(v as number, 5),\r\n    },\r\n    { key: 'count', label: 'Count' },\r\n  ];\r\n});\r\n\r\nconst performanceData = computed(() => {\r\n  if (selectedOption.value === PerformanceOptions.performance) {\r\n    return botStore.activeBot.performanceStats;\r\n  }\r\n  if (selectedOption.value === PerformanceOptions.entryStats) {\r\n    return botStore.activeBot.entryStats;\r\n  }\r\n  if (selectedOption.value === PerformanceOptions.exitStats) {\r\n    return botStore.activeBot.exitStats;\r\n  }\r\n  if (selectedOption.value === PerformanceOptions.mixTagStats) {\r\n    return botStore.activeBot.mixTagStats;\r\n  }\r\n  return [];\r\n});\r\n\r\nconst hasAdvancedStats = computed(() => botStore.activeBot.botApiVersion >= 2.34);\r\n\r\nconst options = [\r\n  { value: PerformanceOptions.performance, text: 'Performance' },\r\n  { value: PerformanceOptions.entryStats, text: 'Entries' },\r\n  { value: PerformanceOptions.exitStats, text: 'Exits' },\r\n  { value: PerformanceOptions.mixTagStats, text: 'Mix Tag' },\r\n];\r\n\r\nfunction refreshSummary() {\r\n  if (selectedOption.value === PerformanceOptions.performance) {\r\n    botStore.activeBot.getPerformance();\r\n  }\r\n  if (selectedOption.value === PerformanceOptions.entryStats) {\r\n    botStore.activeBot.getEntryStats();\r\n  }\r\n  if (selectedOption.value === PerformanceOptions.exitStats) {\r\n    botStore.activeBot.getExitStats();\r\n  }\r\n  if (selectedOption.value === PerformanceOptions.mixTagStats) {\r\n    botStore.activeBot.getMixTagStats();\r\n  }\r\n}\r\n\r\nonMounted(() => {\r\n  refreshSummary();\r\n});\r\n</script>\r\n<template>\r\n  <div>\r\n    <div class=\"mb-2\">\r\n      <h3 class=\"me-auto text-2xl inline\">Performance</h3>\r\n      <Button class=\"float-end\" severity=\"secondary\" @click=\"refreshSummary\">\r\n        <template #icon>\r\n          <i-mdi-refresh />\r\n        </template>\r\n      </Button>\r\n    </div>\r\n    <SelectButton\r\n      v-if=\"hasAdvancedStats\"\r\n      id=\"order-direction\"\r\n      v-model=\"selectedOption\"\r\n      :options=\"options\"\r\n      :allow-empty=\"false\"\r\n      option-label=\"text\"\r\n      option-value=\"value\"\r\n      size=\"small\"\r\n      @change=\"refreshSummary\"\r\n    ></SelectButton>\r\n    <DataTable size=\"small\" class=\"text-center\" :value=\"performanceData\">\r\n      <Column\r\n        v-for=\"field in performanceTable\"\r\n        :key=\"field.key\"\r\n        :field=\"field.key\"\r\n        :header=\"field.label\"\r\n      >\r\n        <template #body=\"slotProps\">\r\n          {{\r\n            field.formatter ? field.formatter(slotProps.data[field.key]) : slotProps.data[field.key]\r\n          }}\r\n        </template>\r\n      </Column>\r\n    </DataTable>\r\n  </div>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport type { ProfitInterface } from '@/types';\r\n\r\nconst props = defineProps({\r\n  profit: { required: true, type: Object as () => ProfitInterface },\r\n  stakeCurrency: { required: true, type: String },\r\n  stakeCurrencyDecimals: { required: true, type: Number },\r\n});\r\n\r\nconst profitItems = computed(() => {\r\n  if (!props.profit) return [];\r\n  return [\r\n    {\r\n      metric: 'ROI closed trades',\r\n      value: props.profit.profit_closed_coin\r\n        ? `${formatPriceCurrency(\r\n            props.profit.profit_closed_coin,\r\n            props.stakeCurrency,\r\n            props.stakeCurrencyDecimals,\r\n          )} (${formatPercent(props.profit.profit_closed_ratio_mean, 2)})`\r\n        : 'N/A',\r\n      // (&sum; ${formatPercent(props.profit.profit_closed_ratio_sum,  2,)})`\r\n    },\r\n    {\r\n      metric: 'ROI all trades',\r\n      value: props.profit.profit_all_coin\r\n        ? `${formatPriceCurrency(\r\n            props.profit.profit_all_coin,\r\n            props.stakeCurrency,\r\n            props.stakeCurrencyDecimals,\r\n          )} (${formatPercent(props.profit.profit_all_ratio_mean, 2)})`\r\n        : 'N/A',\r\n      //  (&sum; ${formatPercent(props.profit.profit_all_ratio_sum,2,)})`\r\n    },\r\n\r\n    {\r\n      metric: 'Total Trade count',\r\n      value: `${props.profit.trade_count ?? 0}`,\r\n    },\r\n    {\r\n      metric: 'Bot started',\r\n      value: props.profit.bot_start_timestamp,\r\n      isTs: true,\r\n    },\r\n    {\r\n      metric: 'First Trade opened',\r\n      value: props.profit.first_trade_timestamp,\r\n      isTs: true,\r\n    },\r\n    {\r\n      metric: 'Latest Trade opened',\r\n      value: props.profit.latest_trade_timestamp,\r\n      isTs: true,\r\n    },\r\n    {\r\n      metric: 'Win / Loss',\r\n      value: `${props.profit.winning_trades ?? 0} / ${props.profit.losing_trades ?? 0}`,\r\n    },\r\n    {\r\n      metric: 'Winrate',\r\n      value: `${props.profit.winrate ? formatPercent(props.profit.winrate) : 'N/A'}`,\r\n    },\r\n    {\r\n      metric: 'Expectancy (ratio)',\r\n      value: `${props.profit.expectancy ? props.profit.expectancy.toFixed(2) : 'N/A'} (${\r\n        props.profit.expectancy_ratio ? props.profit.expectancy_ratio.toFixed(2) : 'N/A'\r\n      })`,\r\n    },\r\n    {\r\n      metric: 'Avg. Duration',\r\n      value: `${props.profit.avg_duration ?? 'N/A'}`,\r\n    },\r\n    {\r\n      metric: 'Best performing',\r\n      value: props.profit.best_pair\r\n        ? `${props.profit.best_pair}: ${formatPercent(props.profit.best_pair_profit_ratio, 2)}`\r\n        : 'N/A',\r\n    },\r\n    {\r\n      metric: 'Trading volume',\r\n      value: `${formatPriceCurrency(\r\n        props.profit.trading_volume ?? 0,\r\n        props.stakeCurrency,\r\n        props.stakeCurrencyDecimals,\r\n      )}`,\r\n    },\r\n    {\r\n      metric: 'Profit factor',\r\n      value: `${props.profit.profit_factor ? props.profit.profit_factor.toFixed(2) : 'N/A'}`,\r\n    },\r\n    {\r\n      metric: 'Max Drawdown',\r\n      value: `${props.profit.max_drawdown ? formatPercent(props.profit.max_drawdown, 2) : 'N/A'} (${\r\n        props.profit.max_drawdown_abs\r\n          ? formatPriceCurrency(\r\n              props.profit.max_drawdown_abs,\r\n              props.stakeCurrency,\r\n              props.stakeCurrencyDecimals,\r\n            )\r\n          : 'N/A'\r\n      }) ${\r\n        props.profit.max_drawdown_start_timestamp && props.profit.max_drawdown_end_timestamp\r\n          ? 'from ' +\r\n            timestampms(props.profit.max_drawdown_start_timestamp) +\r\n            ' to ' +\r\n            timestampms(props.profit.max_drawdown_end_timestamp)\r\n          : ''\r\n      }`,\r\n    },\r\n  ];\r\n});\r\n</script>\r\n\r\n<template>\r\n  <DataTable class=\"text-start\" small borderless :value=\"profitItems\">\r\n    <Column field=\"metric\" header=\"Metric\"></Column>\r\n    <Column field=\"value\" header=\"Value\"></Column>\r\n    <!-- <template #cell(value)=\"row\">\r\n      <DateTimeTZ v-if=\"row.item.isTs && row.value\" :date=\"row.value as number\"></DateTimeTZ>\r\n      <template v-else>{{ row.value }}</template>\r\n    </template> -->\r\n  </DataTable>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { useBotStore } from '@/stores/ftbotwrapper';\r\n\r\nconst botStore = useBotStore();\r\n</script>\r\n\r\n<template>\r\n  <div v-if=\"botStore.activeBot.botState\" class=\"p-4\">\r\n    <p class=\"mb-4\">\r\n      Running Freqtrade <strong>{{ botStore.activeBot.version }}</strong>\r\n    </p>\r\n    <p class=\"mb-4\">\r\n      Running with\r\n      <strong>\r\n        {{ botStore.activeBot.botState.max_open_trades }}x{{\r\n          botStore.activeBot.botState.stake_amount\r\n        }}\r\n        {{ botStore.activeBot.botState.stake_currency }}\r\n      </strong>\r\n      on\r\n      <strong>{{ botStore.activeBot.botState.exchange }}</strong> in\r\n      <strong>{{ botStore.activeBot.botState.trading_mode || 'spot' }}</strong> markets, with\r\n      Strategy <strong>{{ botStore.activeBot.botState.strategy }}</strong\r\n      >.\r\n    </p>\r\n    <p v-if=\"'stoploss_on_exchange' in botStore.activeBot.botState\" class=\"mb-4\">\r\n      Stoploss on exchange is\r\n      <strong>{{\r\n        botStore.activeBot.botState.stoploss_on_exchange ? 'enabled' : 'disabled'\r\n      }}</strong\r\n      >.\r\n    </p>\r\n    <p class=\"mb-4\">\r\n      Currently <strong>{{ botStore.activeBot.botState.state }}</strong\r\n      >,\r\n      <strong>force entry: {{ botStore.activeBot.botState.force_entry_enable }}</strong>\r\n    </p>\r\n    <p>\r\n      <strong>{{ botStore.activeBot.botState.dry_run ? 'Dry-Run' : 'Live' }}</strong>\r\n    </p>\r\n    <Divider />\r\n    <p class=\"mb-4\">\r\n      Avg Profit {{ formatPercent(botStore.activeBot.profit.profit_all_ratio_mean) }} (&sum;\r\n      {{ formatPercent(botStore.activeBot.profit.profit_all_ratio_sum) }}) in\r\n      {{ botStore.activeBot.profit.trade_count }} Trades, with an average duration of\r\n      {{ botStore.activeBot.profit.avg_duration }}. Best pair:\r\n      {{ botStore.activeBot.profit.best_pair }}.\r\n    </p>\r\n    <p v-if=\"botStore.activeBot.profit.first_trade_timestamp\" class=\"mb-4\">\r\n      <span v-if=\"botStore.activeBot.profit.bot_start_timestamp\" class=\"block\">\r\n        Bot start date:\r\n        <strong>\r\n          <DateTimeTZ :date=\"botStore.activeBot.profit.bot_start_timestamp\" show-timezone />\r\n        </strong>\r\n      </span>\r\n      <span class=\"block\">\r\n        First trade opened:\r\n        <strong>\r\n          <DateTimeTZ :date=\"botStore.activeBot.profit.first_trade_timestamp\" show-timezone />\r\n        </strong>\r\n      </span>\r\n      <span class=\"block\">\r\n        Last trade opened:\r\n        <strong>\r\n          <DateTimeTZ :date=\"botStore.activeBot.profit.latest_trade_timestamp\" show-timezone />\r\n        </strong>\r\n      </span>\r\n    </p>\r\n    <p>\r\n      <span v-if=\"botStore.activeBot.profit.profit_factor\" class=\"block\">\r\n        Profit factor:\r\n        {{ botStore.activeBot.profit.profit_factor.toFixed(2) }}\r\n      </span>\r\n      <span v-if=\"botStore.activeBot.profit.trading_volume\" class=\"block mb-4\">\r\n        Trading volume:\r\n        {{\r\n          formatPriceCurrency(\r\n            botStore.activeBot.profit.trading_volume,\r\n            botStore.activeBot.botState.stake_currency,\r\n            botStore.activeBot.botState.stake_currency_decimals ?? 3,\r\n          )\r\n        }}\r\n      </span>\r\n    </p>\r\n    <BotProfit\r\n      class=\"mx-1\"\r\n      :profit=\"botStore.activeBot.profit\"\r\n      :stake-currency=\"botStore.activeBot.botState.stake_currency ?? 'USDT'\"\r\n      :stake-currency-decimals=\"botStore.activeBot.botState.stake_currency_decimals ?? 3\"\r\n    />\r\n  </div>\r\n</template>\r\n","forceexit\r\n<script setup lang=\"ts\">\r\nimport type { MsgBoxObject } from '@/components/general/MessageBox.vue';\r\nimport type MessageBox from '@/components/general/MessageBox.vue';\r\nimport { useBotStore } from '@/stores/ftbotwrapper';\r\nimport type { ForceSellPayload } from '@/types';\r\n\r\nimport ForceEntryForm from './ForceEntryForm.vue';\r\n\r\nconst botStore = useBotStore();\r\nconst forceEnter = ref<boolean>(false);\r\nconst msgBox = ref<typeof MessageBox>();\r\n\r\nconst isRunning = computed((): boolean => {\r\n  return botStore.activeBot.botState?.state === 'running';\r\n});\r\n\r\nconst handleStopBot = () => {\r\n  const msg: MsgBoxObject = {\r\n    title: 'Stop Bot',\r\n    message: 'Stop the bot loop from running?',\r\n    accept: () => {\r\n      botStore.activeBot.stopBot();\r\n    },\r\n  };\r\n  msgBox.value?.show(msg);\r\n};\r\n\r\nconst handleStopBuy = () => {\r\n  const msg: MsgBoxObject = {\r\n    title: 'Pause - Stop Entering',\r\n    message:\r\n      'Freqtrade will continue to handle open trades, but will not enter new trades or increase position sizes.',\r\n    accept: () => {\r\n      botStore.activeBot.stopBuy();\r\n    },\r\n  };\r\n  msgBox.value?.show(msg);\r\n};\r\n\r\nconst handleReloadConfig = () => {\r\n  const msg: MsgBoxObject = {\r\n    title: 'Reload',\r\n    message: 'Reload configuration (including strategy)?',\r\n    accept: () => {\r\n      console.log('reload...');\r\n      botStore.activeBot.reloadConfig();\r\n    },\r\n  };\r\n  msgBox.value?.show(msg);\r\n};\r\n\r\nconst handleForceExit = () => {\r\n  const msg: MsgBoxObject = {\r\n    title: 'ForceExit all',\r\n    message: 'Really forceexit ALL trades?',\r\n    accept: () => {\r\n      const payload: ForceSellPayload = {\r\n        tradeid: 'all',\r\n        // TODO: support ordertype (?)\r\n      };\r\n      botStore.activeBot.forceexit(payload);\r\n    },\r\n  };\r\n  msgBox.value?.show(msg);\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div class=\"flex flex-row gap-1\">\r\n    <Button\r\n      size=\"large\"\r\n      severity=\"secondary\"\r\n      :disabled=\"!botStore.activeBot.isTrading || isRunning\"\r\n      title=\"Start Trading\"\r\n      @click=\"botStore.activeBot.startBot()\"\r\n    >\r\n      <template #icon>\r\n        <i-mdi-play />\r\n      </template>\r\n    </Button>\r\n    <Button\r\n      size=\"large\"\r\n      severity=\"secondary\"\r\n      :disabled=\"!botStore.activeBot.isTrading || !isRunning\"\r\n      title=\"Stop Trading - Also stops handling open trades.\"\r\n      @click=\"handleStopBot()\"\r\n    >\r\n      <template #icon>\r\n        <i-mdi-stop />\r\n      </template>\r\n    </Button>\r\n    <Button\r\n      size=\"large\"\r\n      severity=\"secondary\"\r\n      :disabled=\"!botStore.activeBot.isTrading || !isRunning\"\r\n      title=\"Pause (StopBuy) - Freqtrade will continue to handle open trades, but will not enter new trades or increase position sizes.\"\r\n      @click=\"handleStopBuy()\"\r\n    >\r\n      <template #icon>\r\n        <i-mdi-pause />\r\n      </template>\r\n    </Button>\r\n    <Button\r\n      size=\"large\"\r\n      severity=\"secondary\"\r\n      :disabled=\"!botStore.activeBot.isTrading\"\r\n      title=\"Reload Config - reloads configuration including strategy, resetting all settings changed on the fly.\"\r\n      @click=\"handleReloadConfig()\"\r\n    >\r\n      <template #icon>\r\n        <i-mdi-reload />\r\n      </template>\r\n    </Button>\r\n    <Button\r\n      severity=\"secondary\"\r\n      size=\"large\"\r\n      :disabled=\"!botStore.activeBot.isTrading\"\r\n      title=\"Force exit all\"\r\n      @click=\"handleForceExit()\"\r\n    >\r\n      <template #icon>\r\n        <i-mdi-close-box-multiple />\r\n      </template>\r\n    </Button>\r\n    <Button\r\n      v-if=\"botStore.activeBot.botState && botStore.activeBot.botState.force_entry_enable\"\r\n      size=\"large\"\r\n      severity=\"secondary\"\r\n      :disabled=\"!botStore.activeBot.isTrading || !isRunning\"\r\n      title=\"Force enter - Immediately enter a trade at an optional price. Exits are then handled according to strategy rules.\"\r\n      @click=\"forceEnter = true\"\r\n    >\r\n      <template #icon>\r\n        <i-mdi-plus-box-multiple-outline />\r\n      </template>\r\n    </Button>\r\n    <Button\r\n      v-if=\"botStore.activeBot.isWebserverMode && false\"\r\n      size=\"large\"\r\n      severity=\"secondary\"\r\n      :disabled=\"botStore.activeBot.isTrading\"\r\n      title=\"Start Trading mode\"\r\n      @click=\"botStore.activeBot.startTrade()\"\r\n    >\r\n      <template #icon>\r\n        <i-mdi-play />\r\n      </template>\r\n    </Button>\r\n    <ForceEntryForm v-model=\"forceEnter\" :pair=\"botStore.activeBot.selectedPair\" />\r\n    <MessageBox ref=\"msgBox\" />\r\n  </div>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport type { GridItemData } from '@/types';\r\n\r\nimport { useLayoutStore, findGridLayout, TradeLayout } from '@/stores/layout';\r\nimport { useBotStore } from '@/stores/ftbotwrapper';\r\n\r\nconst botStore = useBotStore();\r\nconst layoutStore = useLayoutStore();\r\nconst settingsStore = useSettingsStore();\r\nconst currentBreakpoint = ref('');\r\n\r\nconst breakpointChanged = (newBreakpoint: string) => {\r\n  // console.log('breakpoint:', newBreakpoint);\r\n  currentBreakpoint.value = newBreakpoint;\r\n};\r\nconst isResizableLayout = computed(() =>\r\n  ['', 'sm', 'md', 'lg', 'xl'].includes(currentBreakpoint.value),\r\n);\r\nconst isLayoutLocked = computed(() => {\r\n  return layoutStore.layoutLocked || !isResizableLayout.value;\r\n});\r\nconst gridLayoutData = computed((): GridItemData[] => {\r\n  if (isResizableLayout.value) {\r\n    return layoutStore.tradingLayout;\r\n  }\r\n  return [...layoutStore.getTradingLayoutSm];\r\n});\r\n\r\nconst gridLayoutMultiPane = computed(() => {\r\n  return findGridLayout(gridLayoutData.value, TradeLayout.multiPane);\r\n});\r\n\r\nconst gridLayoutOpenTrades = computed(() => {\r\n  return findGridLayout(gridLayoutData.value, TradeLayout.openTrades);\r\n});\r\n\r\nconst gridLayoutTradeHistory = computed(() => {\r\n  return findGridLayout(gridLayoutData.value, TradeLayout.tradeHistory);\r\n});\r\n\r\nconst gridLayoutTradeDetail = computed(() => {\r\n  return findGridLayout(gridLayoutData.value, TradeLayout.tradeDetail);\r\n});\r\n\r\nconst gridLayoutChartView = computed(() => {\r\n  return findGridLayout(gridLayoutData.value, TradeLayout.chartView);\r\n});\r\n\r\nconst responsiveGridLayouts = computed(() => {\r\n  return {\r\n    sm: layoutStore.getTradingLayoutSm,\r\n  };\r\n});\r\n\r\nfunction refreshOHLCV(pair: string, columns: string[]) {\r\n  botStore.activeBot.getPairCandles({\r\n    pair: pair,\r\n    timeframe: botStore.activeBot.timeframe,\r\n    columns: columns,\r\n  });\r\n}\r\n</script>\r\n\r\n<template>\r\n  <GridLayout\r\n    class=\"h-full w-full\"\r\n    style=\"padding: 1px\"\r\n    :row-height=\"50\"\r\n    :layout=\"gridLayoutData\"\r\n    :vertical-compact=\"false\"\r\n    :margin=\"[1, 1]\"\r\n    :responsive-layouts=\"responsiveGridLayouts\"\r\n    :is-resizable=\"!isLayoutLocked\"\r\n    :is-draggable=\"!isLayoutLocked\"\r\n    :responsive=\"true\"\r\n    :cols=\"{ lg: 12, md: 12, sm: 12, xs: 4, xxs: 2 }\"\r\n    :col-num=\"12\"\r\n    @update:breakpoint=\"breakpointChanged\"\r\n  >\r\n    <template #default=\"{ gridItemProps }\">\r\n      <GridItem\r\n        v-if=\"gridLayoutMultiPane.h != 0\"\r\n        v-bind=\"gridItemProps\"\r\n        :i=\"gridLayoutMultiPane.i\"\r\n        :x=\"gridLayoutMultiPane.x\"\r\n        :y=\"gridLayoutMultiPane.y\"\r\n        :w=\"gridLayoutMultiPane.w\"\r\n        :h=\"gridLayoutMultiPane.h\"\r\n        drag-allow-from=\".drag-header\"\r\n      >\r\n        <DraggableContainer header=\"다중 패널\">\r\n          <div class=\"mt-1 flex justify-center\">\r\n            <BotControls class=\"mt-1 mb-2\" />\r\n          </div>\r\n          <Tabs value=\"0\" scrollable lazy>\r\n            <TabList>\r\n              <Tab value=\"0\" severity=\"secondary\">\r\n                <div title=\"페어 통합\">\r\n                  <span v-if=\"settingsStore.multiPaneButtonsShowText\" class=\"ms-1\"\r\n                    >페어 통합</span\r\n                  >\r\n                  <i-mdi-view-list v-else />\r\n                </div>\r\n              </Tab>\r\n              <Tab value=\"1\" severity=\"secondary\">\r\n                <div title=\"일반\">\r\n                  <span v-if=\"settingsStore.multiPaneButtonsShowText\" class=\"ms-1\">일반</span>\r\n                  <i-mdi-information v-else />\r\n                </div>\r\n              </Tab>\r\n              <Tab value=\"2\" severity=\"secondary\">\r\n                <div title=\"성능\">\r\n                  <span v-if=\"settingsStore.multiPaneButtonsShowText\" class=\"ms-1\"\r\n                    >성능</span\r\n                  >\r\n                  <i-mdi-chart-line v-else />\r\n                </div>\r\n              </Tab>\r\n              <Tab value=\"3\" severity=\"secondary\">\r\n                <div title=\"잔고\">\r\n                  <span v-if=\"settingsStore.multiPaneButtonsShowText\" class=\"ms-1\">잔고</span>\r\n                  <i-mdi-bank v-else />\r\n                </div>\r\n              </Tab>\r\n              <Tab value=\"4\" severity=\"secondary\">\r\n                <div title=\"시간별 분석\">\r\n                  <span v-if=\"settingsStore.multiPaneButtonsShowText\" class=\"ms-1\"\r\n                    >시간별 분석</span\r\n                  >\r\n                  <i-mdi-folder-clock v-else />\r\n                </div>\r\n              </Tab>\r\n              <Tab value=\"5\" severity=\"secondary\">\r\n                <div title=\"페어 목록\">\r\n                  <span v-if=\"settingsStore.multiPaneButtonsShowText\" class=\"ms-1\">페어 목록</span>\r\n                  <i-mdi-format-list-group v-else />\r\n                </div>\r\n              </Tab>\r\n              <Tab value=\"6\" severity=\"secondary\">\r\n                <div title=\"페어 잠금\">\r\n                  <span v-if=\"settingsStore.multiPaneButtonsShowText\" class=\"ms-1\">페어 잠금</span>\r\n                  <i-mdi-lock-alert v-else />\r\n                </div>\r\n              </Tab>\r\n            </TabList>\r\n            <TabPanels>\r\n              <TabPanel value=\"0\">\r\n                <PairSummary\r\n                  :pairlist=\"botStore.activeBot.whitelist\"\r\n                  :current-locks=\"botStore.activeBot.activeLocks\"\r\n                  :trades=\"botStore.activeBot.openTrades\"\r\n                />\r\n              </TabPanel>\r\n              <TabPanel value=\"1\">\r\n                <BotStatus />\r\n              </TabPanel>\r\n              <TabPanel value=\"2\" lazy>\r\n                <BotPerformance />\r\n              </TabPanel>\r\n              <TabPanel value=\"3\" lazy>\r\n                <BotBalance />\r\n              </TabPanel>\r\n              <TabPanel value=\"4\" lazy>\r\n                <PeriodBreakdown />\r\n              </TabPanel>\r\n\r\n              <TabPanel value=\"5\" lazy>\r\n                <PairListLive />\r\n              </TabPanel>\r\n              <TabPanel value=\"6\" lazy>\r\n                <PairLockList />\r\n              </TabPanel>\r\n            </TabPanels>\r\n          </Tabs>\r\n        </DraggableContainer>\r\n      </GridItem>\r\n      <GridItem\r\n        v-if=\"gridLayoutOpenTrades.h != 0\"\r\n        v-bind=\"gridItemProps\"\r\n        :i=\"gridLayoutOpenTrades.i\"\r\n        :x=\"gridLayoutOpenTrades.x\"\r\n        :y=\"gridLayoutOpenTrades.y\"\r\n        :w=\"gridLayoutOpenTrades.w\"\r\n        :h=\"gridLayoutOpenTrades.h\"\r\n        drag-allow-from=\".drag-header\"\r\n      >\r\n        <DraggableContainer header=\"진행 중인 거래\">\r\n          <TradeList\r\n            class=\"open-trades\"\r\n            :trades=\"botStore.activeBot.openTrades\"\r\n            title=\"진행 중인 거래\"\r\n            :active-trades=\"true\"\r\n            empty-text=\"현재 진행 중인 거래가 없습니다.\"\r\n          />\r\n        </DraggableContainer>\r\n      </GridItem>\r\n      <GridItem\r\n        v-if=\"gridLayoutTradeHistory.h != 0\"\r\n        v-bind=\"gridItemProps\"\r\n        :i=\"gridLayoutTradeHistory.i\"\r\n        :x=\"gridLayoutTradeHistory.x\"\r\n        :y=\"gridLayoutTradeHistory.y\"\r\n        :w=\"gridLayoutTradeHistory.w\"\r\n        :h=\"gridLayoutTradeHistory.h\"\r\n        drag-allow-from=\".drag-header\"\r\n      >\r\n        <DraggableContainer header=\"종료된 거래\">\r\n          <TradeList\r\n            class=\"trade-history\"\r\n            :trades=\"botStore.activeBot.closedTrades\"\r\n            title=\"거래 내역\"\r\n            :show-filter=\"true\"\r\n            empty-text=\"아직 종료된 거래가 없습니다.\"\r\n          />\r\n        </DraggableContainer>\r\n      </GridItem>\r\n      <GridItem\r\n        v-if=\"\r\n          botStore.activeBot.detailTradeId &&\r\n          botStore.activeBot.tradeDetail &&\r\n          gridLayoutTradeDetail.h != 0\r\n        \"\r\n        v-bind=\"gridItemProps\"\r\n        :i=\"gridLayoutTradeDetail.i\"\r\n        :x=\"gridLayoutTradeDetail.x\"\r\n        :y=\"gridLayoutTradeDetail.y\"\r\n        :w=\"gridLayoutTradeDetail.w\"\r\n        :h=\"gridLayoutTradeDetail.h\"\r\n        :min-h=\"4\"\r\n        drag-allow-from=\".drag-header\"\r\n      >\r\n        <DraggableContainer header=\"거래 상세\">\r\n          <TradeDetail\r\n            :trade=\"botStore.activeBot.tradeDetail\"\r\n            :stake-currency=\"botStore.activeBot.stakeCurrency\"\r\n          />\r\n        </DraggableContainer>\r\n      </GridItem>\r\n      <GridItem\r\n        v-if=\"gridLayoutTradeDetail.h != 0\"\r\n        v-bind=\"gridItemProps\"\r\n        :i=\"gridLayoutChartView.i\"\r\n        :x=\"gridLayoutChartView.x\"\r\n        :y=\"gridLayoutChartView.y\"\r\n        :w=\"gridLayoutChartView.w\"\r\n        :h=\"gridLayoutChartView.h\"\r\n        :min-h=\"6\"\r\n        drag-allow-from=\".drag-header\"\r\n      >\r\n        <DraggableContainer header=\"차트\">\r\n          <CandleChartContainer\r\n            :available-pairs=\"botStore.activeBot.whitelist\"\r\n            :historic-view=\"!!false\"\r\n            :timeframe=\"botStore.activeBot.timeframe\"\r\n            :trades=\"botStore.activeBot.allTrades\"\r\n            @refresh-data=\"refreshOHLCV\"\r\n          >\r\n          </CandleChartContainer>\r\n        </DraggableContainer>\r\n      </GridItem>\r\n    </template>\r\n  </GridLayout>\r\n</template>\r\n"],"names":["botStore","useBotStore","removePairLock","item","showAlert","selectedOption","ref","formatTextLen","text","len","performanceTable","computed","v","_a","formatPrice","performanceData","hasAdvancedStats","options","refreshSummary","onMounted","props","__props","profitItems","formatPriceCurrency","formatPercent","timestampms","forceEnter","msgBox","isRunning","handleStopBot","msg","handleStopBuy","handleReloadConfig","handleForceExit","payload","layoutStore","useLayoutStore","settingsStore","useSettingsStore","currentBreakpoint","breakpointChanged","newBreakpoint","isResizableLayout","isLayoutLocked","gridLayoutData","gridLayoutMultiPane","findGridLayout","TradeLayout","gridLayoutOpenTrades","gridLayoutTradeHistory","gridLayoutTradeDetail","gridLayoutChartView","responsiveGridLayouts","refreshOHLCV","pair","columns"],"mappings":"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"}
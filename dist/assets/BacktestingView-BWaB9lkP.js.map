{"version":3,"file":"BacktestingView-BWaB9lkP.js","sources":["../../node_modules/.pnpm/@primeuix+styles@1.0.0/node_modules/@primeuix/styles/radiobuttongroup/index.mjs","../../node_modules/.pnpm/primevue@4.3.3_vue@3.5.13_typescript@5.8.3_/node_modules/primevue/radiobuttongroup/style/index.mjs","../../node_modules/.pnpm/primevue@4.3.3_vue@3.5.13_typescript@5.8.3_/node_modules/primevue/radiobuttongroup/index.mjs","../../src/components/ftbot/TradeListNav.vue","../../src/components/ftbot/BacktestResultChart.vue","../../src/utils/charts/binCount.ts","../../src/components/charts/ProfitDistributionChart.vue","../../src/components/charts/MarketChangeChart.vue","../../src/components/charts/TradeDurationChart.vue","../../src/components/ftbot/BacktestGraphs.vue","../../src/utils/objectToTableItems.ts","../../src/components/ftbot/BacktestResultComparison.vue","../../src/components/ftbot/BacktestResultPeriodBreakdown.vue","../../src/components/ftbot/BacktestResultTablePer.vue","../../src/components/ftbot/BacktestResultAnalysis.vue","../../src/components/ftbot/FreqaiModelSelect.vue","../../src/stores/btStore.ts","../../src/components/ftbot/BacktestRun.vue","../../src/components/ftbot/BacktestHistoryLoad.vue","../../src/components/ftbot/BacktestResultSelect.vue","../../src/views/BacktestingView.vue"],"sourcesContent":["var style=\"\\n.p-radiobutton-group {\\n    display: inline-flex;\\n}\\n\";export{style};//# sourceMappingURL=index.mjs.map","import { style } from '@primeuix/styles/radiobuttongroup';\nimport BaseStyle from '@primevue/core/base/style';\n\nvar classes = {\n  root: 'p-radiobutton-group p-component'\n};\nvar RadioButtonGroupStyle = BaseStyle.extend({\n  name: 'radiobuttongroup',\n  style: style,\n  classes: classes\n});\n\nexport { RadioButtonGroupStyle as default };\n//# sourceMappingURL=index.mjs.map\n","import { uuid } from '@primeuix/utils';\nimport BaseEditableHolder from '@primevue/core/baseeditableholder';\nimport RadioButtonGroupStyle from 'primevue/radiobuttongroup/style';\nimport { createElementBlock, openBlock, mergeProps, renderSlot } from 'vue';\n\nvar script$1 = {\n  name: 'BaseRadioButtonGroup',\n  \"extends\": BaseEditableHolder,\n  style: RadioButtonGroupStyle,\n  provide: function provide() {\n    return {\n      $pcRadioButtonGroup: this,\n      $parentInstance: this\n    };\n  }\n};\n\nvar script = {\n  name: 'RadioButtonGroup',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  data: function data() {\n    return {\n      groupName: this.name\n    };\n  },\n  watch: {\n    name: function name(newValue) {\n      this.groupName = newValue || uuid('radiobutton-group-');\n    }\n  },\n  mounted: function mounted() {\n    this.groupName = this.groupName || uuid('radiobutton-group-');\n  }\n};\n\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    \"class\": _ctx.cx('root')\n  }, _ctx.ptmi('root')), [renderSlot(_ctx.$slots, \"default\")], 16);\n}\n\nscript.render = render;\n\nexport { script as default };\n//# sourceMappingURL=index.mjs.map\n","<script setup lang=\"ts\">\r\nimport type { Trade } from '@/types';\r\n\r\nimport { useBotStore } from '@/stores/ftbotwrapper';\r\n\r\nconst props = defineProps({\r\n  trades: { required: true, type: Array as () => Trade[] },\r\n  backtestMode: { required: false, default: false, type: Boolean },\r\n});\r\nconst emit = defineEmits<{ 'trade-select': [trade: Trade] }>();\r\n\r\nconst botStore = useBotStore();\r\nconst selectedTrade = ref({} as Trade);\r\nconst sortDescendingOrder = ref(true);\r\nconst sortMethod = ref('openDate');\r\nconst sortMethodOptions = [\r\n  { text: 'Open date', value: 'openDate' },\r\n  { text: 'Profit %', value: 'profit' },\r\n];\r\n\r\nconst onTradeSelect = (trade: Trade) => {\r\n  selectedTrade.value = trade;\r\n  emit('trade-select', trade);\r\n};\r\n\r\nconst sortedTrades = computed(() => {\r\n  const field: keyof Trade = sortMethod.value === 'profit' ? 'profit_ratio' : 'open_timestamp';\r\n  return sortDescendingOrder.value\r\n    ? props.trades.slice().sort((a, b) => b[field] - a[field])\r\n    : props.trades.slice().sort((a, b) => a[field] - b[field]);\r\n});\r\n\r\nconst ordersVisible = ref(sortedTrades.value.map(() => false));\r\n\r\nwatch(\r\n  () => botStore.activeBot.selectedPair,\r\n  () => {\r\n    ordersVisible.value = sortedTrades.value.map(() => false);\r\n  },\r\n);\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <div class=\"flex justify-center\">\r\n      <span class=\"me-2\">Sort by:</span>\r\n      <RadioButtonGroup v-model=\"sortMethod\" :options=\"sortMethodOptions\" name=\"radio-options\">\r\n        <div v-for=\"opt in sortMethodOptions\" :key=\"opt.value\" class=\"flex items-center\">\r\n          <RadioButton :id=\"`id-${opt.value}`\" :value=\"opt.value\" />\r\n          <label :for=\"`id-${opt.value}`\">{{ opt.text }}</label>\r\n        </div>\r\n      </RadioButtonGroup>\r\n    </div>\r\n    <ul\r\n      class=\"divide-y divide-surface-300 dark:divide-surface-700 divide-solid border-x border-y rounded-sm border-surface-300 dark:border-surface-700\"\r\n    >\r\n      <Button\r\n        severity=\"secondary\"\r\n        variant=\"text\"\r\n        class=\"w-full flex flex-wrap justify-center items-center\"\r\n        :title=\"'Trade Navigation'\"\r\n        @click=\"sortDescendingOrder = !sortDescendingOrder\"\r\n        >Trade Navigation {{ sortDescendingOrder ? '&#8595;' : '&#8593;' }}\r\n      </Button>\r\n      <li\r\n        v-for=\"(trade, i) in sortedTrades\"\r\n        :key=\"trade.open_timestamp\"\r\n        class=\"flex flex-col py-1 px-1 items-stretch\"\r\n        :title=\"`${trade.pair}`\"\r\n        :class=\"{\r\n          'bg-primary-100 dark:bg-primary-800 text-primary-contrast':\r\n            trade.open_timestamp === selectedTrade.open_timestamp,\r\n        }\"\r\n        @click=\"onTradeSelect(trade)\"\r\n      >\r\n        <div class=\"flex\">\r\n          <div class=\"flex flex-col\">\r\n            <div>\r\n              <span v-if=\"botStore.activeBot.botState.trading_mode !== 'spot'\">{{\r\n                trade.is_short ? 'S-' : 'L-'\r\n              }}</span>\r\n              <DateTimeTZ :date=\"trade.open_timestamp\" />\r\n            </div>\r\n            <TradeProfit :trade=\"trade\" class=\"my-1\" />\r\n            <ProfitPill\r\n              v-if=\"backtestMode\"\r\n              :profit-ratio=\"trade.profit_ratio\"\r\n              :stake-currency=\"botStore.activeBot.stakeCurrency\"\r\n            />\r\n          </div>\r\n          <Button\r\n            size=\"small\"\r\n            class=\"ms-auto mt-auto\"\r\n            variant=\"outlined\"\r\n            severity=\"secondary\"\r\n            @click=\"ordersVisible[i] = !ordersVisible[i]\"\r\n            ><i-mdi-chevron-right v-if=\"!ordersVisible[i]\" width=\"24\" height=\"24\" />\r\n            <i-mdi-chevron-down v-if=\"ordersVisible[i]\" width=\"24\" height=\"24\" />\r\n          </Button>\r\n        </div>\r\n        <Transition>\r\n          <div v-if=\"ordersVisible[i]\">\r\n            <ul class=\"px-3 m-0 list-disc list-inside\">\r\n              <li\r\n                v-for=\"order in trade.orders?.filter((o) => o.order_filled_timestamp !== null)\"\r\n                :key=\"order.order_timestamp\"\r\n              >\r\n                {{ order.ft_order_side }} {{ order.amount }} at {{ order.safe_price }}\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </Transition>\r\n      </li>\r\n      <div v-if=\"trades.length === 0\">No trades to show...</div>\r\n    </ul>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.list-group {\r\n  text-align: left;\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport { useBotStore } from '@/stores/ftbotwrapper';\r\n\r\nimport type { ChartSliderPosition, StrategyBacktestResult, Trade } from '@/types';\r\n\r\nconst props = defineProps<{\r\n  timeframe: string;\r\n  strategy: string;\r\n  freqaiModel?: string;\r\n  timerange: string;\r\n  backtestResult: StrategyBacktestResult;\r\n}>();\r\nconst botStore = useBotStore();\r\nconst isBarVisible = ref({ right: true, left: true });\r\nconst sliderPosition = ref<ChartSliderPosition>();\r\n\r\nconst navigateChartToTrade = (trade: Trade) => {\r\n  sliderPosition.value = {\r\n    startValue: trade.open_timestamp,\r\n    endValue: trade.close_timestamp,\r\n  };\r\n};\r\n\r\nfunction refreshOHLCV(pair: string, columns: string[]) {\r\n  botStore.activeBot.getPairHistory({\r\n    pair: pair,\r\n    timeframe: props.timeframe,\r\n    timerange: props.timerange,\r\n    strategy: props.strategy,\r\n    freqaimodel: props.freqaiModel,\r\n    columns: columns,\r\n  });\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <div class=\"flex flex-row mb-1 items-center\">\r\n      <div class=\"me-2\">\r\n        <Button\r\n          aria-label=\"Close\"\r\n          title=\"Pair Navigation\"\r\n          severity=\"secondary\"\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          @click=\"isBarVisible.left = !isBarVisible.left\"\r\n        >\r\n          <i-mdi-chevron-right v-if=\"!isBarVisible.left\" width=\"24\" height=\"24\" />\r\n          <i-mdi-chevron-left v-if=\"isBarVisible.left\" width=\"24\" height=\"24\" />\r\n        </Button>\r\n      </div>\r\n      <span class=\"grow\">\r\n        Graph will always show the latest values for the selected strategy. <br />\r\n        Timerange: {{ timerange }} - {{ strategy }}\r\n      </span>\r\n      <div class=\"text-end\">\r\n        <Button\r\n          aria-label=\"Close\"\r\n          variant=\"outlined\"\r\n          title=\"Trade Navigation\"\r\n          size=\"small\"\r\n          severity=\"secondary\"\r\n          @click=\"isBarVisible.right = !isBarVisible.right\"\r\n        >\r\n          <i-mdi-chevron-right v-if=\"isBarVisible.right\" width=\"24\" height=\"24\" />\r\n          <i-mdi-chevron-left v-if=\"!isBarVisible.right\" width=\"24\" height=\"24\" />\r\n        </Button>\r\n      </div>\r\n    </div>\r\n    <div class=\"text-center flex flex-row h-full items-stretch\">\r\n      <Transition name=\"fadeleft\">\r\n        <PairSummary\r\n          v-if=\"isBarVisible.left\"\r\n          class=\"overflow-y-auto overflow-x-hidden\"\r\n          style=\"max-height: calc(100vh - 200px)\"\r\n          :pairlist=\"backtestResult.pairlist\"\r\n          :trades=\"backtestResult.trades\"\r\n          :starting-balance=\"backtestResult.starting_balance\"\r\n          sort-method=\"profit\"\r\n          :backtest-mode=\"true\"\r\n        />\r\n      </Transition>\r\n      <CandleChartContainer\r\n        :available-pairs=\"backtestResult.pairlist\"\r\n        :historic-view=\"!!true\"\r\n        :timeframe=\"timeframe\"\r\n        :timerange=\"timerange\"\r\n        :strategy=\"strategy\"\r\n        :trades=\"backtestResult.trades\"\r\n        class=\"flex-shrink-1 candle-chart-container w-full px-0 h-full align-self-stretch\"\r\n        :slider-position=\"sliderPosition\"\r\n        :freqai-model=\"freqaiModel\"\r\n        @refresh-data=\"refreshOHLCV\"\r\n      >\r\n      </CandleChartContainer>\r\n      <Transition name=\"fade\">\r\n        <TradeListNav\r\n          v-if=\"isBarVisible.right\"\r\n          class=\"overflow-y-auto overflow-x-visible min-w-56\"\r\n          style=\"max-height: calc(100vh - 200px)\"\r\n          :trades=\"backtestResult.trades.filter((t) => t.pair === botStore.activeBot.selectedPair)\"\r\n          @trade-select=\"navigateChartToTrade\"\r\n        />\r\n      </Transition>\r\n    </div>\r\n    <DraggableContainer header=\"Single trades\" class=\"row mt-2 w-full\">\r\n      <TradeList\r\n        class=\"row trade-history mt-2 w-full\"\r\n        :trades=\"backtestResult.trades\"\r\n        :show-filter=\"true\"\r\n      />\r\n    </DraggableContainer>\r\n  </div>\r\n</template>\r\n\r\n<style lang=\"css\" scoped>\r\n.candle-chart-container {\r\n  /* TODO: Rough estimate - still to fix correctly\r\n   Applies to all \"calc\" usages in this file. */\r\n  height: calc(100vh - 250px) !important;\r\n}\r\n\r\n.fade-enter-active,\r\n.fade-leave-active {\r\n  transition: all 0.2s;\r\n}\r\n\r\n.fade-enter-from,\r\n.fade-leave-to {\r\n  opacity: 0;\r\n  transform: translateX(30px);\r\n}\r\n.fadeleft-enter-active,\r\n.fadeleft-leave-active {\r\n  transition: all 0.2s;\r\n}\r\n\r\n.fadeleft-enter-from,\r\n.fadeleft-leave-to {\r\n  opacity: 0;\r\n  transform: translateX(-30px);\r\n}\r\n</style>\r\n","export function binData(data: number[], bins: number) {\r\n  const minimum = Math.min(...data);\r\n  const maximum = Math.max(...data);\r\n  const binSize = ((maximum - minimum) * 1.01) / bins;\r\n  // console.log(`data ranges from ${minimum} to ${maximum}, binsize ${binSize}`);\r\n  // Count occurances an array with [bucketStart, count in this bucket]\r\n  const baseBins = [...Array(bins).keys()].map((i) => [\r\n    Math.round((minimum + i * binSize) * 1000) / 1000,\r\n    0,\r\n  ]);\r\n\r\n  // console.log(baseBins);\r\n  for (let i = 0; i < data.length; i++) {\r\n    const index = Math.min(Math.floor((data[i] - minimum) / binSize), bins - 1);\r\n    if (!isNaN(index)) {\r\n      baseBins[index][1]++;\r\n    }\r\n  }\r\n\r\n  return baseBins;\r\n}\r\n","<script setup lang=\"ts\">\r\nimport ECharts from 'vue-echarts';\r\nimport type { EChartsOption } from 'echarts';\r\n\r\nimport { use } from 'echarts/core';\r\nimport { CanvasRenderer } from 'echarts/renderers';\r\nimport { BarChart } from 'echarts/charts';\r\nimport {\r\n  DatasetComponent,\r\n  DataZoomComponent,\r\n  LegendComponent,\r\n  TitleComponent,\r\n  TooltipComponent,\r\n} from 'echarts/components';\r\n\r\nimport type { ClosedTrade } from '@/types';\r\nimport { useSettingsStore } from '@/stores/settings';\r\n\r\nuse([\r\n  BarChart,\r\n\r\n  CanvasRenderer,\r\n\r\n  DatasetComponent,\r\n  DataZoomComponent,\r\n  LegendComponent,\r\n  TitleComponent,\r\n  TooltipComponent,\r\n]);\r\n\r\n// Define Column labels here to avoid typos\r\nconst CHART_PROFIT = 'Trade count';\r\n\r\nconst props = defineProps({\r\n  trades: { required: true, type: Array as () => ClosedTrade[] },\r\n  showTitle: { default: true, type: Boolean },\r\n});\r\nconst settingsStore = useSettingsStore();\r\n// registerTransform(ecStat.transform.histogram);\r\n// console.log(profits);\r\n// const data = [[]];\r\nconst binOptions = [\r\n  { text: '10', value: 10 },\r\n  { text: '15', value: 15 },\r\n  { text: '20', value: 20 },\r\n  { text: '25', value: 25 },\r\n  { text: '50', value: 50 },\r\n];\r\nconst data = computed(() => {\r\n  const profits = props.trades.map((trade) => trade.profit_ratio);\r\n\r\n  return binData(profits, settingsStore.profitDistributionBins);\r\n});\r\n\r\nconst chartOptions = computed((): EChartsOption => {\r\n  const chartOptionsLoc: EChartsOption = {\r\n    title: {\r\n      text: 'Profit distribution',\r\n      left: 'center',\r\n      show: props.showTitle,\r\n    },\r\n    backgroundColor: 'rgba(0, 0, 0, 0)',\r\n    dataset: {\r\n      source: data.value,\r\n    },\r\n    tooltip: {\r\n      trigger: 'axis',\r\n      axisPointer: {\r\n        type: 'line',\r\n        label: {\r\n          backgroundColor: '#6a7985',\r\n        },\r\n      },\r\n    },\r\n    legend: {\r\n      data: [CHART_PROFIT],\r\n      right: '5%',\r\n      selectedMode: false,\r\n    },\r\n    xAxis: {\r\n      type: 'category',\r\n      name: 'Profit %',\r\n      nameLocation: 'middle',\r\n      nameGap: 25,\r\n    },\r\n    yAxis: [\r\n      {\r\n        type: 'value',\r\n        name: CHART_PROFIT,\r\n        splitLine: {\r\n          show: false,\r\n        },\r\n        nameRotate: 90,\r\n        nameLocation: 'middle',\r\n        nameGap: 35,\r\n        position: 'left',\r\n      },\r\n    ],\r\n    grid: {\r\n      ...echartsGridDefault,\r\n      bottom: 50,\r\n    },\r\n\r\n    series: [\r\n      {\r\n        type: 'bar',\r\n        name: CHART_PROFIT,\r\n        animation: true,\r\n        encode: {\r\n          x: 'x0',\r\n          y: 'y0',\r\n        },\r\n\r\n        // symbol: 'none',\r\n      },\r\n    ],\r\n  };\r\n  return chartOptionsLoc;\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div class=\"flex flex-col h-full relative\">\r\n    <div class=\"grow mb-2\">\r\n      <ECharts v-if=\"trades\" :option=\"chartOptions\" autoresize :theme=\"settingsStore.chartTheme\" />\r\n    </div>\r\n    <div\r\n      class=\"z-2 absolute fixed-top flex items-center gap-10 ms-2\"\r\n      :class=\"{ 'mx-auto': showTitle }\"\r\n      label-for=\"input-bins\"\r\n      size=\"sm\"\r\n    >\r\n      <label for=\"input-bins\">Bins</label>\r\n      <Select\r\n        id=\"input-bins\"\r\n        v-model=\"settingsStore.profitDistributionBins\"\r\n        size=\"small\"\r\n        option-label=\"text\"\r\n        option-value=\"value\"\r\n        class=\"mt-1\"\r\n        :options=\"binOptions\"\r\n      ></Select>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.echarts {\r\n  width: 100%;\r\n  height: 100%;\r\n  min-height: 150px;\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport ECharts from 'vue-echarts';\r\n// import { EChartsOption } from 'echarts';\r\n\r\nimport { use } from 'echarts/core';\r\nimport { CanvasRenderer } from 'echarts/renderers';\r\nimport { LineChart } from 'echarts/charts';\r\nimport {\r\n  DataZoomComponent,\r\n  DatasetComponent,\r\n  GridComponent,\r\n  LegendComponent,\r\n  CalendarComponent,\r\n  TitleComponent,\r\n  TooltipComponent,\r\n  VisualMapComponent,\r\n} from 'echarts/components';\r\n\r\nimport type { BacktestMarketChange } from '@/types';\r\nimport type { EChartsOption } from 'echarts';\r\n\r\nuse([\r\n  LineChart,\r\n  CalendarComponent,\r\n  CanvasRenderer,\r\n  GridComponent,\r\n  DatasetComponent,\r\n  DataZoomComponent,\r\n  LegendComponent,\r\n  TitleComponent,\r\n  TooltipComponent,\r\n  VisualMapComponent,\r\n]);\r\n\r\n// Define Column labels here to avoid typos\r\nconst CHART_MARKET_CHANGE = 'Market change %';\r\n\r\nconst props = defineProps({\r\n  marketChangeData: {\r\n    type: Object as () => BacktestMarketChange | null,\r\n    required: true,\r\n  },\r\n  showTitle: {\r\n    type: Boolean,\r\n    default: true,\r\n  },\r\n});\r\n\r\nconst settingsStore = useSettingsStore();\r\n\r\nconst marketChangeChart = ref(null);\r\n\r\nconst marketChangeOptions: ComputedRef<EChartsOption> = computed(() => {\r\n  if (!props.marketChangeData) {\r\n    return {};\r\n  }\r\n  const colDate = props.marketChangeData.columns.findIndex((el) => el === '__date_ts');\r\n  const colRelMean = props.marketChangeData.columns.findIndex((el) => el === 'rel_mean');\r\n  return {\r\n    title: {\r\n      text: 'Market change %',\r\n      left: 'center',\r\n      show: props.showTitle,\r\n    },\r\n    backgroundColor: 'rgba(0, 0, 0, 0)',\r\n    dataset: {\r\n      source: props.marketChangeData.data,\r\n    },\r\n    tooltip: {\r\n      trigger: 'axis',\r\n      axisPointer: {\r\n        type: 'line',\r\n        label: {\r\n          backgroundColor: '#6a7985',\r\n        },\r\n      },\r\n    },\r\n    grid: {\r\n      ...echartsGridDefault,\r\n    },\r\n    legend: {\r\n      data: [CHART_MARKET_CHANGE],\r\n      right: '5%',\r\n    },\r\n    xAxis: [\r\n      {\r\n        type: 'time',\r\n        axisLine: { onZero: false },\r\n        axisTick: { show: true },\r\n        axisLabel: { show: true },\r\n        axisPointer: {\r\n          label: { show: false },\r\n        },\r\n        // position: 'top',\r\n        splitLine: { show: false },\r\n        splitNumber: 20,\r\n        min: 'dataMin',\r\n        max: 'dataMax',\r\n      },\r\n    ],\r\n    yAxis: [\r\n      {\r\n        type: 'value',\r\n        name: CHART_MARKET_CHANGE,\r\n        splitLine: {\r\n          show: false,\r\n        },\r\n        nameRotate: 90,\r\n        nameLocation: 'middle',\r\n        nameGap: 35,\r\n      },\r\n    ],\r\n    dataZoom: [\r\n      {\r\n        type: 'inside',\r\n        start: 0,\r\n        end: 100,\r\n      },\r\n      {\r\n        bottom: 10,\r\n        start: 0,\r\n        end: 100,\r\n        ...dataZoomPartial,\r\n      },\r\n    ],\r\n    series: [\r\n      {\r\n        type: 'line',\r\n        name: CHART_MARKET_CHANGE,\r\n        showSymbol: false,\r\n        color: settingsStore.chartTheme === 'dark' ? '#c2c2c2' : 'black',\r\n        encode: {\r\n          x: colDate,\r\n          // open, close, low, high\r\n          y: colRelMean,\r\n        },\r\n      },\r\n    ],\r\n  };\r\n});\r\n</script>\r\n\r\n<template>\r\n  <ECharts\r\n    v-if=\"marketChangeData?.data\"\r\n    ref=\"marketChangeChart\"\r\n    :option=\"marketChangeOptions\"\r\n    :theme=\"settingsStore.chartTheme\"\r\n    autoresize\r\n  />\r\n</template>\r\n\r\n<style lang=\"css\" scoped>\r\n.echarts {\r\n  min-height: 240px;\r\n  height: 100%;\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport ECharts from 'vue-echarts';\r\nimport type { ClosedTrade } from '@/types';\r\nimport type { EChartsOption } from 'echarts';\r\n\r\nimport { use } from 'echarts/core';\r\nimport { CanvasRenderer } from 'echarts/renderers';\r\nimport { BoxplotChart, ScatterChart } from 'echarts/charts';\r\nimport {\r\n  DatasetComponent,\r\n  DataZoomComponent,\r\n  GridComponent,\r\n  LegendComponent,\r\n  TitleComponent,\r\n  TooltipComponent,\r\n  TransformComponent,\r\n  VisualMapComponent,\r\n} from 'echarts/components';\r\n\r\nconst props = withDefaults(\r\n  defineProps<{\r\n    trades: ClosedTrade[];\r\n    showTitle?: boolean;\r\n  }>(),\r\n  {\r\n    showTitle: true,\r\n  },\r\n);\r\n\r\nconst settingsStore = useSettingsStore();\r\n\r\nuse([\r\n  DatasetComponent,\r\n  TitleComponent,\r\n  TooltipComponent,\r\n  GridComponent,\r\n  LegendComponent,\r\n  DataZoomComponent,\r\n  TransformComponent,\r\n  BoxplotChart,\r\n  CanvasRenderer,\r\n  VisualMapComponent,\r\n  ScatterChart,\r\n]);\r\n\r\nconst allTrades = computed(() => {\r\n  return props.trades.map((trade) => {\r\n    // Convert timestamp difference to minutes (timestamps are in milliseconds)\r\n    return (trade.close_timestamp - trade.open_timestamp) / (60 * 1000);\r\n  });\r\n});\r\n\r\nconst winningTrades = computed(() => {\r\n  return props.trades\r\n    .filter((trade) => trade.profit_ratio > 0)\r\n    .map((trade) => {\r\n      return (trade.close_timestamp - trade.open_timestamp) / (60 * 1000);\r\n    });\r\n});\r\n\r\nconst losingTrades = computed(() => {\r\n  return props.trades\r\n    .filter((trade) => trade.profit_ratio <= 0)\r\n    .map((trade) => {\r\n      return (trade.close_timestamp - trade.open_timestamp) / (60 * 1000);\r\n    });\r\n});\r\n\r\nconst chartOptions = computed((): EChartsOption => {\r\n  return {\r\n    title: {\r\n      text: 'Trades durations',\r\n      left: 'center',\r\n      show: props.showTitle,\r\n    },\r\n    backgroundColor: 'rgba(0, 0, 0, 0)',\r\n    dataset: [\r\n      {\r\n        id: 'allTrades',\r\n        source: [allTrades.value, winningTrades.value, losingTrades.value],\r\n      },\r\n      {\r\n        id: 'allTradesBoxplot',\r\n        fromDatasetId: 'allTrades',\r\n        transform: {\r\n          type: 'boxplot',\r\n\r\n          config: {\r\n            itemNameFormatter: (params) => {\r\n              if (params.value === 0) {\r\n                return 'All trades';\r\n              } else if (params.value === 1) {\r\n                return 'Winning trades';\r\n              } else if (params.value === 2) {\r\n                return 'Losing trades';\r\n              }\r\n            },\r\n          },\r\n        },\r\n      },\r\n      {\r\n        id: 'outlier',\r\n        fromDatasetIndex: 1,\r\n        fromTransformResult: 1,\r\n      },\r\n    ],\r\n    xAxis: {\r\n      type: 'category',\r\n      show: true,\r\n      // data: ['All Trades', 'Winning Trades', 'Losing Trades'],\r\n    },\r\n    yAxis: [\r\n      {\r\n        type: 'value',\r\n        name: 'Trade duration',\r\n        splitArea: {\r\n          show: true,\r\n        },\r\n        axisLabel: {\r\n          formatter: formatDuration,\r\n        },\r\n      },\r\n    ],\r\n    tooltip: {\r\n      formatter: (params: any) => {\r\n        if (params.seriesType === 'boxplot') {\r\n          const statistics = params.data;\r\n          return `\r\n            <div>${params.name}</div>\r\n            <div>Min: ${formatDuration(statistics[1])}</div>\r\n            <div>Q1: ${formatDuration(statistics[2])}</div>\r\n            <div>Median: ${formatDuration(statistics[3])}</div>\r\n            <div>Q3: ${formatDuration(statistics[4])}</div>\r\n            <div>Max: ${formatDuration(statistics[5])}</div>\r\n          `;\r\n        }\r\n        return '';\r\n      },\r\n    },\r\n    visualMap: [\r\n      {\r\n        type: 'piecewise',\r\n        show: false,\r\n        dimension: 0,\r\n        pieces: [\r\n          {\r\n            min: 0,\r\n            max: 0,\r\n            label: 'All Trades',\r\n            color: '#5470c6',\r\n          },\r\n          {\r\n            min: 1,\r\n            max: 1,\r\n            label: 'Winning Trades',\r\n            color: '#91cc75',\r\n          },\r\n          {\r\n            min: 2,\r\n            max: 2,\r\n            label: 'Losing Trades',\r\n            color: '#fc8452',\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n    series: [\r\n      {\r\n        name: 'Trade durations',\r\n        type: 'boxplot',\r\n        datasetId: 'allTradesBoxplot',\r\n        colorBy: 'data',\r\n        // itemStyle: {\r\n        //   color: '#b8c5f2',\r\n        // },\r\n      },\r\n      {\r\n        name: 'outlier',\r\n        type: 'scatter',\r\n        datasetId: 'outlier',\r\n      },\r\n    ],\r\n  };\r\n});\r\n\r\n// Helper function to format duration in human-readable format\r\nfunction formatDuration(minutes: number): string {\r\n  if (minutes >= 60) {\r\n    const hours = Math.floor(minutes / 60);\r\n    const mins = Math.floor(minutes % 60);\r\n    return `${hours}h ${mins}m`;\r\n  }\r\n  return `${Math.floor(minutes)}m`;\r\n}\r\n</script>\r\n\r\n<template>\r\n  <!-- {{ chartData }} -->\r\n  <ECharts\r\n    v-if=\"trades.length > 0\"\r\n    :option=\"chartOptions\"\r\n    autoresize\r\n    :theme=\"settingsStore.chartTheme\"\r\n  />\r\n</template>\r\n\r\n<style scoped>\r\n.echarts {\r\n  width: 100%;\r\n  height: 100%;\r\n  min-height: 150px;\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport type { ClosedTrade } from '@/types';\r\nimport TradeDurationChart from '../charts/TradeDurationChart.vue';\r\n\r\ndefineProps({\r\n  trades: { required: true, type: Array as () => ClosedTrade[] },\r\n});\r\n\r\nconst botStore = useBotStore();\r\n\r\nconst { state: marketChangeData } = useAsyncState(\r\n  () => botStore.activeBot.getBacktestMarketChange(),\r\n  null,\r\n);\r\n</script>\r\n<template>\r\n  <div class=\"text-center flex-fill flex flex-col h-full gap-1\">\r\n    <TradesLogChart :trades=\"trades\" class=\"flex-grow-1 chart-equal-height\" />\r\n    <TradeDurationChart\r\n      class=\"flex-grow-1 chart-equal-height\"\r\n      :trades=\"trades\"\r\n      :show-title=\"true\"\r\n    />\r\n    <CumProfitChart :trades=\"trades\" class=\"flex-grow-1 chart-equal-height\" :show-title=\"true\" />\r\n    <MarketChangeChart\r\n      v-if=\"marketChangeData\"\r\n      :market-change-data=\"marketChangeData\"\r\n      class=\"flex-grow-1 chart-equal-height\"\r\n    />\r\n    <ProfitDistributionChart\r\n      class=\"flex-grow-1 chart-equal-height\"\r\n      :trades=\"trades\"\r\n      :show-title=\"true\"\r\n    />\r\n  </div>\r\n</template>\r\n<style scoped lang=\"css\">\r\n.chart-equal-height {\r\n  min-height: 300px !important;\r\n}\r\n</style>\r\n","interface childObjects {\r\n  [key: string]: string | boolean | number | undefined;\r\n}\r\ninterface MutatingObject {\r\n  [key: string]: childObjects[];\r\n}\r\n\r\n/**\r\n *\r\n * @param originalobj Object in the form {Name, [{metric: value}]]}\r\n * @param valueKey Key to use for result\r\n * @returns Object in the form [{valueKey: metric, Name: value}]\r\n */\r\nexport function formatObjectForTable(originalobj: MutatingObject, valueKey: string) {\r\n  const result = Object.entries(originalobj).reduce((acc: childObjects[], [key, value]) => {\r\n    value.forEach((item) => {\r\n      const [metric, val] = Object.entries(item)[0];\r\n      const existingItem = acc.find((i) => i[valueKey] === metric);\r\n      if (existingItem) {\r\n        existingItem[key] = val;\r\n      } else {\r\n        acc.push({\r\n          [valueKey]: metric,\r\n          [key]: val,\r\n        });\r\n      }\r\n    });\r\n    return acc;\r\n  }, []);\r\n  return result;\r\n}\r\n","<script setup lang=\"ts\">\r\nimport type { BacktestResultInMemory } from '@/types';\r\n\r\nconst props = defineProps({\r\n  backtestResults: { required: true, type: Object as () => Record<string, BacktestResultInMemory> },\r\n});\r\n\r\nconst backtestResultStats = computed(() => {\r\n  const values = {};\r\n  Object.entries(props.backtestResults).forEach(([key, result]) => {\r\n    const tmp = generateBacktestMetricRows(result.strategy);\r\n    values[key] = tmp;\r\n  });\r\n  console.log(values);\r\n  // return '';\r\n  return formatObjectForTable(values, 'metric');\r\n});\r\n\r\nconst backtestResultFields = computed(() => {\r\n  const res = [{ key: 'metric', label: 'Metric' }];\r\n  Object.entries(props.backtestResults).forEach(([key, value]) => {\r\n    res.push({ key, label: value.metadata.strategyName });\r\n  });\r\n  return res;\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div class=\"px-0 mw-full\">\r\n    <div class=\"flex justify-center\">\r\n      <h3 class=\"font-bold text-3xl\">Backtest-result comparison</h3>\r\n    </div>\r\n    <div class=\"flex flex-col text-start ms-0 me-2 gap-2\">\r\n      <div class=\"flex flex-col flex-xl-row\">\r\n        <div class=\"px-0 xl:px-0 pt-2 xl:pt-0 xl:ps-1 flex-fill\">\r\n          <DataTable bordered :value=\"backtestResultStats\" size=\"small\" show-gridlines>\r\n            <Column\r\n              v-for=\"col in backtestResultFields\"\r\n              :key=\"col.key\"\r\n              :field=\"col.key\"\r\n              :label=\"col.label\"\r\n            >\r\n              <template #header>\r\n                <BacktestResultSelectEntry\r\n                  v-if=\"col.key && col.key in backtestResults\"\r\n                  :backtest-result=\"backtestResults[col.key]\"\r\n                />\r\n                <span v-else>{{ col.label }}</span>\r\n              </template>\r\n            </Column>\r\n          </DataTable>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport type { PeriodicBreakdown } from '@/types';\r\n\r\nconst props = defineProps<{\r\n  periodicBreakdown: PeriodicBreakdown;\r\n}>();\r\n\r\nconst periodicBreakdownSelections = computed(() => {\r\n  const res = [\r\n    { value: 'day', text: 'Days' },\r\n    { value: 'week', text: 'Weeks' },\r\n    { value: 'month', text: 'Months' },\r\n  ];\r\n  if (props.periodicBreakdown.year) {\r\n    res.push({ value: 'year', text: 'Years' });\r\n  }\r\n\r\n  return res;\r\n});\r\n\r\nconst periodicBreakdownPeriod = ref<string>('month');\r\n</script>\r\n\r\n<template>\r\n  <SelectButton\r\n    v-model=\"periodicBreakdownPeriod\"\r\n    :options=\"periodicBreakdownSelections\"\r\n    size=\"small\"\r\n    :allow-empty=\"false\"\r\n    class=\"m-2\"\r\n    option-label=\"text\"\r\n    option-value=\"value\"\r\n  ></SelectButton>\r\n  <DataTable size=\"small\" stacked=\"sm\" :value=\"periodicBreakdown[periodicBreakdownPeriod]\">\r\n    <Column field=\"date\" header=\"Date\"></Column>\r\n    <Column field=\"trades\" header=\"Trades\">\r\n      <template #body=\"{ data, field }\">\r\n        {{ data[field] ?? 'N/A' }}\r\n      </template>\r\n    </Column>\r\n    <Column field=\"profit_abs\" header=\"Total Profit\" :body=\"formatPrice\">\r\n      <template #body=\"{ data, field }\">\r\n        {{ data[field] ? data[field].toFixed(2) : 'N/A' }}\r\n      </template>\r\n    </Column>\r\n    <Column field=\"profit_factor\" header=\"Profit Factor\">\r\n      <template #body=\"{ data, field }\">\r\n        {{ formatPrice(data[field], 2) }}\r\n      </template>\r\n    </Column>\r\n    <Column field=\"wins\" header=\"Wins\"></Column>\r\n    <Column field=\"draws\" header=\"Draws\"></Column>\r\n    <Column field=\"losses\" header=\"Losses\">\r\n      <template #body=\"{ data }\">\r\n        {{ data.loses ?? data.losses ?? 'N/A' }}\r\n      </template>\r\n    </Column>\r\n    <Column field=\"wins\" header=\"Win Rate\">\r\n      <template #body=\"{ data }\">\r\n        {{\r\n          ((data.wins / (data.wins + data.draws + (data.loses ?? data.losses))) * 100).toFixed(2) +\r\n          '%'\r\n        }}\r\n      </template>\r\n    </Column>\r\n  </DataTable>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport type { ExitReasonResults, PairResult } from '@/types';\r\n\r\ntype ResultsType = PairResult | ExitReasonResults;\r\ntype ResultsTypeWithKey = ResultsType & { key?: string | string[] };\r\nconst props = withDefaults(\r\n  defineProps<{\r\n    title: string;\r\n    results: ResultsType[];\r\n    stakeCurrency: string;\r\n    stakeCurrencyDecimals: number;\r\n    keyHeader?: string;\r\n    keyHeaders?: string[];\r\n  }>(),\r\n  {\r\n    keyHeader: '',\r\n    keyHeaders: () => [],\r\n  },\r\n);\r\n\r\nconst tableItems = computed<ResultsTypeWithKey[]>(() =>\r\n  props.results.map((v) => {\r\n    if (props.keyHeaders.length > 0) {\r\n      return {\r\n        ...v,\r\n        key:\r\n          typeof v['key'] === 'string' ? Array(props.keyHeaders.length).fill(v['key']) : v['key'],\r\n      };\r\n    }\r\n    return v;\r\n  }),\r\n);\r\n\r\nconst perTagReason = computed(() => {\r\n  const firstFields: {\r\n    key: string;\r\n    label: string;\r\n    formatter: (value: string, item: ResultsTypeWithKey) => string;\r\n  }[] = [];\r\n  if (props.keyHeaders.length > 0) {\r\n    // Keys could be an array\r\n    for (let i = 0; i < props.keyHeaders.length; i += 1) {\r\n      firstFields.push({\r\n        key: `key[${i}]`,\r\n        label: props.keyHeaders[i],\r\n        formatter: (value, item) =>\r\n          Array.isArray(value) ? value[i] : value || item['exit_reason'] || 'OTHER',\r\n      });\r\n    }\r\n  } else {\r\n    firstFields.push({\r\n      key: 'key',\r\n      label: props.keyHeader,\r\n      formatter: (value, item) => (value || item['exit_reason'] || 'OTHER') as string,\r\n    });\r\n  }\r\n  return firstFields;\r\n});\r\n\r\nconst settingsStore = useSettingsStore();\r\n\r\nconst metrics = computed(() =>\r\n  availableBacktestMetrics.value.filter(\r\n    (metric) =>\r\n      metric.field !== 'key' && settingsStore.backtestAdditionalMetrics.includes(metric.field),\r\n  ),\r\n);\r\n</script>\r\n<template>\r\n  <DraggableContainer>\r\n    <template #header>\r\n      <div class=\"flex flex-row w-full justify-between items-center\">\r\n        {{ title }}\r\n        <div>\r\n          Shown metrics:\r\n          <MultiSelect\r\n            id=\"backtestMetrics\"\r\n            v-model=\"settingsStore.backtestAdditionalMetrics\"\r\n            :options=\"availableBacktestMetrics\"\r\n            option-label=\"header\"\r\n            option-value=\"field\"\r\n            size=\"small\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </template>\r\n    <DataTable size=\"small\" hover stacked=\"sm\" :value=\"tableItems\">\r\n      <Column v-for=\"col in perTagReason\" :key=\"col.key\" :field=\"col.key\" :header=\"col.label\">\r\n        <template #body=\"{ data }\">\r\n          {{ col.formatter(data['key'], data) }}\r\n        </template>\r\n      </Column>\r\n      <Column field=\"trades\" header=\"Trades\"></Column>\r\n      <Column field=\"profit_mean\" header=\"Avg Profit %\">\r\n        <template #body=\"{ data, field }\">\r\n          {{ formatPercent(data[field], 2) }}\r\n        </template>\r\n      </Column>\r\n      <Column field=\"profit_total_abs\" :header=\"`Tot Profit ${props.stakeCurrency}`\">\r\n        <template #body=\"{ data, field }\">\r\n          {{ formatPrice(data[field], props.stakeCurrencyDecimals) }}\r\n        </template>\r\n      </Column>\r\n      <Column field=\"profit_total\" header=\"Tot Profit %\">\r\n        <template #body=\"{ data, field }\">\r\n          {{ formatPercent(data[field], 2) }}\r\n        </template>\r\n      </Column>\r\n      <Column field=\"wins\" header=\"Wins\"></Column>\r\n      <Column field=\"draws\" header=\"Draws\"></Column>\r\n      <Column field=\"losses\" header=\"Losses\"></Column>\r\n\r\n      <Column v-for=\"col in metrics\" :key=\"col.field\" :field=\"col.field\" :header=\"col.header\">\r\n        <template #body=\"{ data, field }\">\r\n          {{ col.is_ratio ? formatPercent(data[field], 2) : formatPrice(data[field], 2) }}\r\n        </template>\r\n      </Column>\r\n    </DataTable>\r\n  </DraggableContainer>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport type { StrategyBacktestResult } from '@/types';\r\n\r\nconst props = defineProps<{\r\n  backtestResult: StrategyBacktestResult;\r\n}>();\r\n\r\nconst backtestResultStats = computed(() => {\r\n  const tmp = generateBacktestMetricRows(props.backtestResult);\r\n  return formatObjectForTable({ value: tmp }, 'metric');\r\n});\r\n\r\nconst backtestResultSettings = computed(() => {\r\n  // Transpose Result into readable format\r\n  const tmp = generateBacktestSettingRows(props.backtestResult);\r\n\r\n  return formatObjectForTable({ value: tmp }, 'setting');\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div class=\"px-0 w-full\">\r\n    <div class=\"flex justify-center\">\r\n      <h3 class=\"font-bold text-2xl mb-2\">\r\n        Backtest-result for {{ backtestResult.strategy_name }}\r\n      </h3>\r\n    </div>\r\n\r\n    <div class=\"flex flex-col text-start ms-0 me-2 gap-2\">\r\n      <div class=\"flex flex-col xl:flex-row\">\r\n        <div class=\"px-0 px-xl-0 pe-xl-1 grow\">\r\n          <DraggableContainer header=\"Strategy settings\">\r\n            <DataTable size=\"small\" :value=\"backtestResultSettings\">\r\n              <Column field=\"setting\" header=\"Setting\"></Column>\r\n              <Column field=\"value\" header=\"Value\"></Column>\r\n            </DataTable>\r\n          </DraggableContainer>\r\n        </div>\r\n        <div class=\"px-0 xl:px-0 pt-2 xl:pt-0 xl:ps-1 grow\">\r\n          <DraggableContainer header=\"Metrics\">\r\n            <DataTable size=\"small\" borderless :value=\"backtestResultStats\">\r\n              <Column field=\"metric\" header=\"Metric\" />\r\n              <Column field=\"value\" header=\"Value\" />\r\n            </DataTable>\r\n          </DraggableContainer>\r\n        </div>\r\n      </div>\r\n      <BacktestResultTablePer\r\n        title=\"Results per Enter tag\"\r\n        :results=\"backtestResult.results_per_enter_tag\"\r\n        :stake-currency=\"backtestResult.stake_currency\"\r\n        key-header=\"Enter Tag\"\r\n        :stake-currency-decimals=\"backtestResult.stake_currency_decimals\"\r\n      />\r\n\r\n      <BacktestResultTablePer\r\n        title=\"Results per Exit reason\"\r\n        :results=\"backtestResult.exit_reason_summary ?? []\"\r\n        :stake-currency=\"backtestResult.stake_currency\"\r\n        key-header=\"Exit Reason\"\r\n        :stake-currency-decimals=\"backtestResult.stake_currency_decimals\"\r\n      />\r\n\r\n      <BacktestResultTablePer\r\n        v-if=\"backtestResult.mix_tag_stats\"\r\n        title=\"Results Mixed Tag\"\r\n        :results=\"backtestResult.mix_tag_stats ?? []\"\r\n        :stake-currency=\"backtestResult.stake_currency\"\r\n        :key-headers=\"['Enter Tag', 'Exit Tag']\"\r\n        :stake-currency-decimals=\"backtestResult.stake_currency_decimals\"\r\n      />\r\n\r\n      <BacktestResultTablePer\r\n        title=\"Results per pair\"\r\n        :results=\"backtestResult.results_per_pair\"\r\n        :stake-currency=\"backtestResult.stake_currency\"\r\n        key-header=\"Pair\"\r\n        :stake-currency-decimals=\"backtestResult.stake_currency_decimals\"\r\n      />\r\n      <DraggableContainer v-if=\"backtestResult.periodic_breakdown\" header=\"Periodic breakdown\">\r\n        <BacktestResultPeriodBreakdown :periodic-breakdown=\"backtestResult.periodic_breakdown\">\r\n        </BacktestResultPeriodBreakdown>\r\n      </DraggableContainer>\r\n\r\n      <DraggableContainer header=\"Single trades\">\r\n        <TradeList\r\n          :trades=\"backtestResult.trades\"\r\n          :show-filter=\"true\"\r\n          :stake-currency=\"backtestResult.stake_currency\"\r\n        />\r\n      </DraggableContainer>\r\n    </div>\r\n  </div>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { useBotStore } from '@/stores/ftbotwrapper';\r\n\r\nconst locFreqaiModel = defineModel<string>();\r\nconst botStore = useBotStore();\r\n\r\nonMounted(() => {\r\n  if (botStore.activeBot.freqaiModelList.length === 0) {\r\n    botStore.activeBot.getFreqAIModelList();\r\n  }\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <div class=\"w-full flex\">\r\n      <Select\r\n        v-model=\"locFreqaiModel\"\r\n        :options=\"botStore.activeBot.freqaiModelList\"\r\n        fluid\r\n        size=\"small\"\r\n      >\r\n      </Select>\r\n      <div class=\"ms-2\">\r\n        <Button\r\n          severity=\"secondary\"\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          @click=\"botStore.activeBot.getFreqAIModelList\"\r\n        >\r\n          <template #icon>\r\n            <i-mdi-refresh />\r\n          </template>\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n","export const useBtStore = defineStore('btStore', {\r\n  state: () => {\r\n    return {\r\n      strategy: '',\r\n      selectedTimeframe: '',\r\n      selectedDetailTimeframe: '',\r\n      timerange: '',\r\n      maxOpenTrades: null as number | null,\r\n      stakeAmount: null as number | null,\r\n      startingCapital: null as number | null,\r\n      allowCache: true,\r\n      enableProtections: false,\r\n      stakeAmountUnlimited: false,\r\n      freqAI: {\r\n        enabled: false,\r\n        model: '',\r\n        identifier: '',\r\n      },\r\n    };\r\n  },\r\n  getters: {\r\n    canRunBacktest: (state) => state.strategy !== '',\r\n  },\r\n  actions: {},\r\n});\r\n\r\nif (import.meta.hot) {\r\n  import.meta.hot.accept(acceptHMRUpdate(useBtStore, import.meta.hot));\r\n}\r\n","<script setup lang=\"ts\">\r\nimport { useBotStore } from '@/stores/ftbotwrapper';\r\nimport type { BacktestPayload } from '@/types';\r\n\r\nimport { useBtStore } from '@/stores/btStore';\r\nconst botStore = useBotStore();\r\nconst btStore = useBtStore();\r\n\r\nfunction clickBacktest() {\r\n  const btPayload: BacktestPayload = {\r\n    strategy: btStore.strategy,\r\n    timerange: btStore.timerange,\r\n    enable_protections: btStore.enableProtections,\r\n  };\r\n  if (btStore.maxOpenTrades) {\r\n    btPayload.max_open_trades = btStore.maxOpenTrades;\r\n  }\r\n  if (btStore.stakeAmountUnlimited) {\r\n    btPayload.stake_amount = 'unlimited';\r\n  } else {\r\n    const stakeAmountLoc = Number(btStore.stakeAmount);\r\n    if (stakeAmountLoc) {\r\n      btPayload.stake_amount = stakeAmountLoc.toString();\r\n    }\r\n  }\r\n\r\n  const startingCapitalLoc = Number(btStore.startingCapital);\r\n  if (startingCapitalLoc) {\r\n    btPayload.dry_run_wallet = startingCapitalLoc;\r\n  }\r\n\r\n  if (btStore.selectedTimeframe) {\r\n    btPayload.timeframe = btStore.selectedTimeframe;\r\n  }\r\n  if (btStore.selectedDetailTimeframe) {\r\n    btPayload.timeframe_detail = btStore.selectedDetailTimeframe;\r\n  }\r\n  if (!btStore.allowCache) {\r\n    btPayload.backtest_cache = 'none';\r\n  }\r\n  if (btStore.freqAI.enabled) {\r\n    btPayload.freqaimodel = btStore.freqAI.model;\r\n    if (btStore.freqAI.identifier !== '') {\r\n      btPayload.freqai = { identifier: btStore.freqAI.identifier };\r\n    }\r\n  }\r\n\r\n  botStore.activeBot.startBacktest(btPayload);\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div class=\"mb-2\">\r\n    <span>Strategy</span>\r\n    <StrategySelect v-model=\"btStore.strategy\"></StrategySelect>\r\n  </div>\r\n  <div\r\n    class=\"grid grid-cols-2 border border-surface-500 rounded-sm gap-y-2 gap-2 items-center p-1 pt-3\"\r\n    :disabled=\"botStore.activeBot.backtestRunning\"\r\n  >\r\n    <!-- Backtesting parameters -->\r\n    <h3 class=\"font-bold mb-2 col-span-2 text-center\">Backtesting parameters</h3>\r\n    <label for=\"timeframe-select\">Timeframe:</label>\r\n    <TimeframeSelect id=\"timeframe-select\" v-model=\"btStore.selectedTimeframe\" size=\"small\" />\r\n    <label for=\"timeframe-detail-select\" class=\"flex justify-end items-center gap-2\"\r\n      >Detail Timeframe:\r\n      <InfoBox\r\n        hint=\"Detail timeframe, to simulate intra-candle results. Not setting this will not use this functionality.\"\r\n      />\r\n    </label>\r\n    <TimeframeSelect\r\n      id=\"timeframe-detail-select\"\r\n      v-model=\"btStore.selectedDetailTimeframe\"\r\n      size=\"small\"\r\n      :below-timeframe=\"btStore.selectedTimeframe\"\r\n    />\r\n\r\n    <label for=\"max-open-trades\">Max open trades:</label>\r\n    <InputNumber\r\n      id=\"max-open-trades\"\r\n      v-model=\"btStore.maxOpenTrades\"\r\n      size=\"small\"\r\n      placeholder=\"Use strategy default\"\r\n      type=\"number\"\r\n    ></InputNumber>\r\n    <label for=\"starting-capital\">Starting capital:</label>\r\n    <InputNumber\r\n      id=\"starting-capital\"\r\n      v-model=\"btStore.startingCapital\"\r\n      size=\"small\"\r\n      placeholder=\"Use config default\"\r\n      type=\"number\"\r\n      :step=\"0.001\"\r\n    ></InputNumber>\r\n    <label for=\"stake-amount-bool\">Stake amount:</label>\r\n    <div class=\"flex items-center\">\r\n      <div class=\"flex basis-full\">\r\n        <BaseCheckbox id=\"stake-amount-bool\" v-model=\"btStore.stakeAmountUnlimited\"\r\n          >Unlimited stake</BaseCheckbox\r\n        >\r\n      </div>\r\n      <InputNumber\r\n        id=\"stake-amount\"\r\n        v-model=\"btStore.stakeAmount\"\r\n        placeholder=\"Use strategy default\"\r\n        :step=\"0.01\"\r\n        size=\"small\"\r\n        :disabled=\"btStore.stakeAmountUnlimited\"\r\n      ></InputNumber>\r\n    </div>\r\n\r\n    <label for=\"enable-protections\">Enable Protections:</label>\r\n    <BaseCheckbox id=\"enable-protections\" v-model=\"btStore.enableProtections\"></BaseCheckbox>\r\n    <template v-if=\"botStore.activeBot.botApiVersion >= 2.22\">\r\n      <label for=\"enable-cache\">Cache Backtest results:</label>\r\n      <BaseCheckbox id=\"enable-cache\" v-model=\"btStore.allowCache\"></BaseCheckbox>\r\n    </template>\r\n\r\n    <template v-if=\"botStore.activeBot.botApiVersion >= 2.22\">\r\n      <div class=\"flex justify-end items-center\">\r\n        <span class=\"me-2\">Enable FreqAI:</span>\r\n        <InfoBox\r\n          hint=\"Assumes freqAI configuration is setup in the configuration, and the strategy is a freqAI strategy. Will fail if that's not the case.\"\r\n        />\r\n      </div>\r\n      <BaseCheckbox id=\"enable-freqai\" v-model=\"btStore.freqAI.enabled\"></BaseCheckbox>\r\n\r\n      <template v-if=\"btStore.freqAI.enabled\">\r\n        <label for=\"freqai-identifier\">FreqAI identifier:</label>\r\n        <InputText\r\n          id=\"freqai-identifier\"\r\n          v-model=\"btStore.freqAI.identifier\"\r\n          placeholder=\"Use config default\"\r\n          size=\"small\"\r\n        ></InputText>\r\n      </template>\r\n      <template v-if=\"btStore.freqAI.enabled\">\r\n        <label for=\"freqai-model\">FreqAI Model:</label>\r\n        <FreqaiModelSelect id=\"freqai-model\" v-model=\"btStore.freqAI.model\"></FreqaiModelSelect>\r\n      </template>\r\n    </template>\r\n\r\n    <Divider class=\"col-span-2\" />\r\n    <TimeRangeSelect v-model=\"btStore.timerange\" class=\"mx-auto mt-2 col-span-2\"></TimeRangeSelect>\r\n  </div>\r\n\r\n  <h3 class=\"mt-3 font-bold text-2xl\">Backtesting summary</h3>\r\n  <div class=\"flex flex-wrap md:flex-nowrap justify-between md:justify-center\">\r\n    <Button\r\n      id=\"start-backtest\"\r\n      severity=\"primary\"\r\n      :disabled=\"\r\n        !btStore.canRunBacktest ||\r\n        botStore.activeBot.backtestRunning ||\r\n        !botStore.activeBot.canRunBacktest\r\n      \"\r\n      class=\"mx-1\"\r\n      @click=\"clickBacktest\"\r\n    >\r\n      Start backtest\r\n    </Button>\r\n    <Button\r\n      severity=\"secondary\"\r\n      :disabled=\"botStore.activeBot.backtestRunning || !botStore.activeBot.canRunBacktest\"\r\n      class=\"mx-1\"\r\n      @click=\"botStore.activeBot.pollBacktest\"\r\n    >\r\n      Load backtest result\r\n    </Button>\r\n    <Button\r\n      severity=\"secondary\"\r\n      class=\"mx-1\"\r\n      :disabled=\"!botStore.activeBot.backtestRunning\"\r\n      @click=\"botStore.activeBot.stopBacktest\"\r\n    >\r\n      Stop Backtest\r\n    </Button>\r\n    <Button\r\n      severity=\"secondary\"\r\n      class=\"mx-1\"\r\n      :disabled=\"botStore.activeBot.backtestRunning || !botStore.activeBot.canRunBacktest\"\r\n      @click=\"botStore.activeBot.removeBacktest\"\r\n    >\r\n      Reset Backtest\r\n    </Button>\r\n  </div>\r\n</template>\r\n<style lang=\"css\" scoped>\r\nlabel {\r\n  @apply text-right;\r\n}\r\n</style>\r\n","<script setup lang=\"ts\">\r\nimport type { MsgBoxObject } from '@/components/general/MessageBox.vue';\r\nimport MessageBox from '@/components/general/MessageBox.vue';\r\nimport { useBotStore } from '@/stores/ftbotwrapper';\r\nimport type { BacktestHistoryEntry } from '@/types';\r\nimport InfoBox from '../general/InfoBox.vue';\r\n\r\nconst botStore = useBotStore();\r\nconst msgBox = ref<typeof MessageBox>();\r\nconst filterText = ref('');\r\nconst filterTextDebounced = refDebounced(filterText, 350, { maxWait: 1000 });\r\n\r\nonMounted(() => {\r\n  botStore.activeBot.getBacktestHistory();\r\n});\r\n\r\nfunction deleteBacktestResult(result: BacktestHistoryEntry) {\r\n  const msg: MsgBoxObject = {\r\n    title: 'Delete result',\r\n    message: `Delete result ${result.filename} from disk?`,\r\n    accept: () => {\r\n      botStore.activeBot.deleteBacktestHistoryResult(result);\r\n    },\r\n  };\r\n  msgBox.value?.show(msg);\r\n}\r\n\r\nconst filteredList = computed(() =>\r\n  botStore.activeBot.backtestHistoryList.filter(\r\n    (r) =>\r\n      r.filename.toLowerCase().includes(filterTextDebounced.value.toLowerCase()) ||\r\n      r.strategy.toLowerCase().includes(filterTextDebounced.value.toLowerCase()),\r\n  ),\r\n);\r\nfunction rowClick(row) {\r\n  botStore.activeBot.getBacktestHistoryResult(row.data);\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <Button\r\n      class=\"float-end\"\r\n      title=\"Refresh\"\r\n      aria-label=\"Refresh\"\r\n      variant=\"outlined\"\r\n      severity=\"secondary\"\r\n      @click=\"botStore.activeBot.getBacktestHistory\"\r\n    >\r\n      <i-mdi-refresh />\r\n    </Button>\r\n    <p>\r\n      Load Historic results from disk. You can click on multiple results to load all of them into\r\n      freqUI.\r\n    </p>\r\n    <div v-if=\"botStore.activeBot.backtestHistoryList.length > 0\" class=\"flex align-center\">\r\n      <InputText\r\n        id=\"trade-filter\"\r\n        v-model=\"filterText\"\r\n        type=\"text\"\r\n        size=\"small\"\r\n        placeholder=\"Filter results\"\r\n        title=\"Filter results\"\r\n      />\r\n    </div>\r\n    <DataTable\r\n      v-if=\"botStore.activeBot.backtestHistoryList.length > 0\"\r\n      class=\"mt-2\"\r\n      responsive\r\n      size=\"small\"\r\n      scrollable\r\n      scroll-height=\"50rem\"\r\n      :virtual-scroller-options=\"{ itemSize: 46 }\"\r\n      show-gridlines\r\n      :value=\"filteredList\"\r\n      @row-click=\"rowClick\"\r\n    >\r\n      <Column field=\"strategy\" header=\"Strategy2\"></Column>\r\n      <Column field=\"timeframe\" header=\"Details\">\r\n        <template #body=\"{ data }\">\r\n          <strong>{{ data.timeframe }}</strong>\r\n          <span v-if=\"data.backtest_start_ts && data.backtest_end_ts\" class=\"ms-1\">\r\n            {{ timestampToTimeRangeString(data.backtest_start_ts * 1000) }}-{{\r\n              timestampToTimeRangeString(data.backtest_end_ts * 1000)\r\n            }}</span\r\n          >\r\n        </template>\r\n      </Column>\r\n      <Column field=\"backtest_start_time\" header=\"Backtest Time\">\r\n        <template #body=\"{ data }\">\r\n          <DateTimeTZ :date=\"data.backtest_start_time * 1000\" />\r\n        </template>\r\n      </Column>\r\n      <Column field=\"filename\" header=\"Filename\"></Column>\r\n      <Column field=\"actions\" header=\"Actions\">\r\n        <template #body=\"{ data }\">\r\n          <div class=\"flex items-center\">\r\n            <InfoBox\r\n              v-if=\"botStore.activeBot.botApiVersion >= 2.32\"\r\n              :class=\"data.notes ? 'opacity-100' : 'opacity-0'\"\r\n              :hint=\"data.notes ?? ''\"\r\n            ></InfoBox>\r\n            <Button\r\n              v-if=\"botStore.activeBot.botApiVersion >= 2.31\"\r\n              class=\"ms-1\"\r\n              size=\"small\"\r\n              title=\"Load this Result.\"\r\n              :disabled=\"data.run_id in botStore.activeBot.backtestHistory\"\r\n              @click.stop=\"botStore.activeBot.getBacktestHistoryResult(data)\"\r\n            >\r\n              <template #icon>\r\n                <i-mdi-arrow-right />\r\n              </template>\r\n            </Button>\r\n            <Button\r\n              v-if=\"botStore.activeBot.botApiVersion >= 2.31\"\r\n              class=\"ms-1\"\r\n              size=\"small\"\r\n              severity=\"secondary\"\r\n              title=\"Delete this Result.\"\r\n              :disabled=\"data.run_id in botStore.activeBot.backtestHistory\"\r\n              @click.stop=\"deleteBacktestResult(data)\"\r\n            >\r\n              <template #icon>\r\n                <i-mdi-delete />\r\n              </template>\r\n            </Button>\r\n          </div>\r\n        </template>\r\n      </Column>\r\n    </DataTable>\r\n  </div>\r\n  <MessageBox ref=\"msgBox\" />\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport type { BacktestResultInMemory, BacktestResultUpdate } from '@/types';\r\n\r\ndefineProps({\r\n  backtestHistory: {\r\n    required: true,\r\n    type: Object as () => Record<string, BacktestResultInMemory>,\r\n  },\r\n  selectedBacktestResultKey: { required: false, default: '', type: String },\r\n  canUseModify: { required: false, default: false, type: Boolean },\r\n});\r\nconst emit = defineEmits<{\r\n  selectionChange: [value: string];\r\n  removeResult: [value: string];\r\n  updateResult: [value: BacktestResultUpdate];\r\n}>();\r\n\r\nconst setBacktestResult = (key: string) => {\r\n  emit('selectionChange', key);\r\n};\r\n\r\nfunction confirmInput(run_id: string, result: BacktestResultInMemory) {\r\n  result.metadata.editing = !result.metadata.editing;\r\n  if (result.metadata.filename) {\r\n    emit('updateResult', {\r\n      run_id: run_id,\r\n      notes: result.metadata.notes ?? '',\r\n      filename: result.metadata.filename,\r\n      strategy: result.metadata.strategyName,\r\n    });\r\n  }\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div class=\"flex flex-col items-stretch\">\r\n    <h3 class=\"font-bold text-2xl\">Available results:</h3>\r\n    <ul\r\n      class=\"ms-2 divide-y border-x border-surface-500 rounded-sm border-y divide-solid divide-surface-500\"\r\n    >\r\n      <li\r\n        v-for=\"[key, result] in Object.entries(backtestHistory)\"\r\n        :key=\"key\"\r\n        button\r\n        :class=\"{\r\n          'bg-primary dark:border-primary text-primary-contrast': key === selectedBacktestResultKey,\r\n        }\"\r\n        class=\"flex justify-between items-center py-1 px-1\"\r\n        @click=\"setBacktestResult(key)\"\r\n      >\r\n        <template v-if=\"!result.metadata.editing\">\r\n          <BacktestResultSelectEntry :backtest-result=\"result\" :can-use-modify=\"canUseModify\" />\r\n          <div class=\"flex\">\r\n            <Button\r\n              v-if=\"canUseModify\"\r\n              class=\"flex-nowrap\"\r\n              size=\"small\"\r\n              severity=\"secondary\"\r\n              title=\"Modify result notes.\"\r\n              @click.stop=\"result.metadata.editing = !result.metadata.editing\"\r\n            >\r\n              <template #icon>\r\n                <i-mdi-pencil />\r\n              </template>\r\n            </Button>\r\n            <Button\r\n              size=\"small\"\r\n              class=\"flex-nowrap\"\r\n              severity=\"secondary\"\r\n              title=\"Delete this Result from UI.\"\r\n              @click.stop=\"emit('removeResult', key)\"\r\n            >\r\n              <template #icon>\r\n                <i-mdi-delete />\r\n              </template>\r\n            </Button>\r\n          </div>\r\n        </template>\r\n        <template v-if=\"result.metadata.editing\">\r\n          <Textarea v-model=\"result.metadata.notes\" placeholder=\"notes\" size=\"small\"> </Textarea>\r\n\r\n          <Button size=\"small\" title=\"Confirm\" @click.stop=\"confirmInput(key, result)\">\r\n            <template #icon>\r\n              <i-mdi-check />\r\n            </template>\r\n          </Button>\r\n        </template>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n","<script setup lang=\"ts\">\r\nimport { useBtStore } from '@/stores/btStore';\r\nimport { useBotStore } from '@/stores/ftbotwrapper';\r\n\r\nenum BtRunModes {\r\n  run = 'run',\r\n  results = 'results',\r\n  visualize = 'visualize',\r\n  visualizesummary = 'visualize-summary',\r\n  compareresults = 'compare-results',\r\n  historicresults = 'historicResults',\r\n}\r\n\r\nconst botStore = useBotStore();\r\nconst btStore = useBtStore();\r\n\r\nconst hasBacktestResult = computed(() =>\r\n  botStore.activeBot.backtestHistory\r\n    ? Object.keys(botStore.activeBot.backtestHistory).length !== 0\r\n    : false,\r\n);\r\nconst hasMultiBacktestResult = computed(() =>\r\n  botStore.activeBot.backtestHistory\r\n    ? Object.keys(botStore.activeBot.backtestHistory).length > 1\r\n    : false,\r\n);\r\n\r\nconst timeframe = computed((): string => {\r\n  try {\r\n    return botStore.activeBot.selectedBacktestResult.timeframe;\r\n  } catch (err) {\r\n    return '';\r\n  }\r\n});\r\n\r\nconst showLeftBar = ref(false);\r\n\r\nconst btFormMode = ref<BtRunModes>(BtRunModes.run);\r\nconst pollInterval = ref<number | null>(null);\r\n\r\nconst selectBacktestResult = () => {\r\n  // Set parameters for this result\r\n  btStore.strategy = botStore.activeBot.selectedBacktestResult.strategy_name;\r\n  botStore.activeBot.getStrategy(btStore.strategy);\r\n  btStore.selectedTimeframe = botStore.activeBot.selectedBacktestResult.timeframe;\r\n  btStore.selectedDetailTimeframe =\r\n    botStore.activeBot.selectedBacktestResult.timeframe_detail || '';\r\n  // TODO: maybe this should not use timerange, but the actual backtest start/end results instead?\r\n  btStore.timerange = botStore.activeBot.selectedBacktestResult.timerange;\r\n};\r\n\r\nwatch(\r\n  () => botStore.activeBot.selectedBacktestResultKey,\r\n  () => {\r\n    selectBacktestResult();\r\n  },\r\n);\r\n\r\nonMounted(() => botStore.activeBot.getState());\r\nwatch(\r\n  () => botStore.activeBot.backtestRunning,\r\n  () => {\r\n    if (botStore.activeBot.backtestRunning === true) {\r\n      pollInterval.value = window.setInterval(botStore.activeBot.pollBacktest, 1000);\r\n    } else if (pollInterval.value) {\r\n      clearInterval(pollInterval.value);\r\n      pollInterval.value = null;\r\n    }\r\n  },\r\n);\r\n</script>\r\n\r\n<template>\r\n  <div class=\"flex flex-row pt-1 me-1 relative\" style=\"height: calc(100vh - 60px)\">\r\n    <div\r\n      class=\"flex md:flex-row h-full w-16\"\r\n      :class=\"{\r\n        'w-96!': showLeftBar,\r\n      }\"\r\n    >\r\n      <!-- Left bar -->\r\n      <div\r\n        v-if=\"btFormMode !== 'visualize'\"\r\n        class=\"me-3 flex flex-col fixed\"\r\n        style=\"max-height: calc(100vh - 60px)\"\r\n      >\r\n        <Button\r\n          class=\"self-start\"\r\n          aria-label=\"Close\"\r\n          size=\"small\"\r\n          severity=\"secondary\"\r\n          variant=\"outlined\"\r\n          @click=\"showLeftBar = !showLeftBar\"\r\n        >\r\n          <i-mdi-chevron-right v-if=\"!showLeftBar\" width=\"24\" height=\"24\" />\r\n          <i-mdi-chevron-left v-if=\"showLeftBar\" width=\"24\" height=\"24\" />\r\n        </Button>\r\n        <Transition name=\"fade\">\r\n          <BacktestResultSelect\r\n            v-if=\"showLeftBar\"\r\n            :backtest-history=\"botStore.activeBot.backtestHistory\"\r\n            :selected-backtest-result-key=\"botStore.activeBot.selectedBacktestResultKey\"\r\n            :can-use-modify=\"botStore.activeBot.botApiVersion >= 2.32\"\r\n            @selection-change=\"botStore.activeBot.setBacktestResultKey\"\r\n            @remove-result=\"botStore.activeBot.removeBacktestResultFromMemory\"\r\n            @update-result=\"botStore.activeBot.saveBacktestResultMetadata\"\r\n          />\r\n        </Transition>\r\n      </div>\r\n      <!-- End Left bar -->\r\n    </div>\r\n    <div class=\"flex flex-col w-full\">\r\n      <h2 class=\"ms-5 text-3xl font-bold\">백테스팅</h2>\r\n      <p v-if=\"!botStore.activeBot.canRunBacktest\">\r\n        백테스팅을 사용하려면 봇이 웹서버 모드여야 합니다.\r\n      </p>\r\n      <div class=\"w-full\">\r\n        <Tabs value=\"run\" lazy>\r\n          <TabList>\r\n            <Tab\r\n              v-if=\"botStore.activeBot.botApiVersion >= 2.15\"\r\n              v-model=\"btFormMode\"\r\n              class=\"flex items-center\"\r\n              value=\"historicResults\"\r\n              :disabled=\"!botStore.activeBot.canRunBacktest\"\r\n              ><i-mdi-cloud-download class=\"me-2\" />결과 불러오기</Tab\r\n            >\r\n            <Tab\r\n              v-model=\"btFormMode\"\r\n              class=\"flex items-center\"\r\n              value=\"run\"\r\n              :disabled=\"!botStore.activeBot.canRunBacktest\"\r\n              ><i-mdi-run-fast class=\"me-2\" />백테스트 실행</Tab\r\n            >\r\n            <Tab\r\n              id=\"bt-analyze-btn\"\r\n              v-model=\"btFormMode\"\r\n              class=\"flex items-center\"\r\n              value=\"results\"\r\n              :disabled=\"!hasBacktestResult\"\r\n              ><i-mdi-table-eye class=\"me-2\" />결과 분석</Tab\r\n            >\r\n            <Tab\r\n              v-if=\"hasMultiBacktestResult\"\r\n              v-model=\"btFormMode\"\r\n              class=\"flex items-center\"\r\n              value=\"compare-results\"\r\n              :disabled=\"!hasMultiBacktestResult\"\r\n              ><i-mdi-compare-horizontal class=\"me-2\" />결과 비교</Tab\r\n            >\r\n            <Tab\r\n              v-model=\"btFormMode\"\r\n              class=\"flex items-center\"\r\n              value=\"visualize-summary\"\r\n              :disabled=\"!hasBacktestResult\"\r\n              ><i-mdi-chart-bell-curve-cumulative class=\"me-2\" />요약 시각화</Tab\r\n            >\r\n            <Tab\r\n              v-model=\"btFormMode\"\r\n              class=\"flex items-center\"\r\n              value=\"visualize\"\r\n              :disabled=\"!hasBacktestResult\"\r\n              ><i-mdi-chart-timeline-variant-shimmer class=\"me-2\" />결과 시각화</Tab\r\n            >\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel value=\"historicResults\">\r\n              <BacktestHistoryLoad />\r\n            </TabPanel>\r\n            <TabPanel value=\"run\">\r\n              <BacktestRun />\r\n            </TabPanel>\r\n            <TabPanel value=\"results\">\r\n              <BacktestResultAnalysis\r\n                v-if=\"hasBacktestResult\"\r\n                :backtest-result=\"botStore.activeBot.selectedBacktestResult\"\r\n                class=\"flex-fill\"\r\n              />\r\n            </TabPanel>\r\n            <TabPanel value=\"compare-results\">\r\n              <BacktestResultComparison\r\n                v-if=\"hasMultiBacktestResult\"\r\n                :backtest-results=\"botStore.activeBot.backtestHistory\"\r\n                class=\"flex-fill\"\r\n              />\r\n            </TabPanel>\r\n            <TabPanel value=\"visualize-summary\">\r\n              <BacktestGraphs\r\n                v-if=\"hasBacktestResult\"\r\n                :trades=\"botStore.activeBot.selectedBacktestResult.trades\"\r\n                class=\"flex-fill\"\r\n              />\r\n            </TabPanel>\r\n            <TabPanel value=\"visualize\" l>\r\n              <BacktestResultChart\r\n                :timeframe=\"timeframe\"\r\n                :strategy=\"btStore.strategy\"\r\n                :timerange=\"btStore.timerange\"\r\n                :backtest-result=\"botStore.activeBot.selectedBacktestResult\"\r\n                :freqai-model=\"btStore.freqAI.enabled ? btStore.freqAI.model : undefined\"\r\n              />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n\r\n        <small v-show=\"botStore.activeBot.backtestRunning\" class=\"text-end bt-running-label\"\r\n          >백테스트 실행 중: {{ botStore.activeBot.backtestStep }}\r\n          {{ formatPercent(botStore.activeBot.backtestProgress, 2) }}</small\r\n        >\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style lang=\"css\" scoped>\r\n.bt-running-label {\r\n  position: absolute;\r\n  right: 2em;\r\n  margin-top: 1em;\r\n}\r\n\r\n.flex-samesize-items {\r\n  flex: 1 1 0;\r\n  @media md {\r\n    flex: unset;\r\n  }\r\n}\r\n\r\n.fade-enter-active,\r\n.fade-leave-active {\r\n  transition: all 0.2s;\r\n}\r\n\r\n.fade-enter,\r\n.fade-leave-to {\r\n  opacity: 0;\r\n}\r\n\r\n.bt-config {\r\n  @media (min-width: 992px) {\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    max-width: 75vw;\r\n  }\r\n}\r\n</style>\r\n"],"names":["style","classes","RadioButtonGroupStyle","BaseStyle","script$1","BaseEditableHolder","script","newValue","uuid","render","_ctx","_cache","$props","$setup","$data","$options","openBlock","createElementBlock","mergeProps","renderSlot","props","__props","emit","__emit","botStore","useBotStore","selectedTrade","ref","sortDescendingOrder","sortMethod","sortMethodOptions","onTradeSelect","trade","sortedTrades","computed","field","a","b","ordersVisible","watch","isBarVisible","sliderPosition","navigateChartToTrade","refreshOHLCV","pair","columns","binData","data","bins","minimum","binSize","baseBins","i","index","CHART_PROFIT","use","BarChart","CanvasRenderer","DatasetComponent","DataZoomComponent","LegendComponent","TitleComponent","TooltipComponent","settingsStore","useSettingsStore","binOptions","profits","chartOptions","echartsGridDefault","CHART_MARKET_CHANGE","LineChart","CalendarComponent","GridComponent","VisualMapComponent","marketChangeChart","marketChangeOptions","colDate","el","colRelMean","dataZoomPartial","TransformComponent","BoxplotChart","ScatterChart","allTrades","winningTrades","losingTrades","params","formatDuration","statistics","minutes","hours","mins","marketChangeData","useAsyncState","formatObjectForTable","originalobj","valueKey","acc","key","value","item","metric","val","existingItem","backtestResultStats","values","result","tmp","generateBacktestMetricRows","backtestResultFields","res","periodicBreakdownSelections","periodicBreakdownPeriod","tableItems","v","perTagReason","firstFields","metrics","availableBacktestMetrics","backtestResultSettings","generateBacktestSettingRows","locFreqaiModel","_useModel","onMounted","useBtStore","defineStore","state","btStore","clickBacktest","btPayload","stakeAmountLoc","startingCapitalLoc","msgBox","filterText","filterTextDebounced","refDebounced","deleteBacktestResult","msg","_a","filteredList","r","rowClick","row","setBacktestResult","confirmInput","run_id","hasBacktestResult","hasMultiBacktestResult","timeframe","showLeftBar","btFormMode","pollInterval","selectBacktestResult"],"mappings":"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","x_google_ignoreList":[0,1,2]}